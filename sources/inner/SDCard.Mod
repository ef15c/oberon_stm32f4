MODULE SDCard;
  IMPORT SYSTEM, BSP;

  CONST
    (*common error flag*) NONE = {}; 

    (*SDIO error flags*) CMD_CRC_FAIL = {0}; DATA_CRC_FAIL = {1}; CMD_RSP_TIMEOUT = {2}; DATA_TIMEOUT = {3}; TX_UNDERRUN = {4};
      RX_OVERRUN = {5}; ADDR_MISALIGNED = {6}; BLOCK_LEN_ERR = {7}; ERASE_SEQ_ERR = {8}; BAD_ERASE_PARAM = {9};
      WRITE_PROT_VIOLATION = {10}; LOCK_UNLOCK_FAILED = {11}; COM_CRC_FAILED = {12}; ILLEGAL_CMD = {13}; CARD_ECC_FAILED = {14};
      CC_ERR = {15}; GENERAL_UNKNOWN_ERR = {16}; STREAM_READ_UNDERRUN= {17}; STREAM_WRITE_OVERRUN = {18};
      CID_CSD_OVERWRITE = {19}; WP_ERASE_SKIP = {20}; CARD_ECC_DISABLED = {21}; ERASE_RESET = {22}; AKE_SEQ_ERR = {23};
      ADD_OUT_OF_RANGE = {25}; INVALID_PARAMETER = {27}; UNSUPPORTED_FEATURE = {28}; BUSY = {29}; ERROR_DMA = {30};
      ERROR_TIMEOUT = {31};

    (*OCR flags*) OCR_ADDR_OUT_OF_RANGE = {31}; OCR_ADDR_MISALIGNED = {30}; OCR_BLOCK_LEN_ERR = {29};
      OCR_ERASE_SEQ_ERR = {28}; OCR_BAD_ERASE_PARAM = {27}; OCR_WRITE_PROT_VIOLATION = {26}; OCR_LOCK_UNLOCK_FAILED = {24};
      OCR_COM_CRC_FAILED = {23}; OCR_ILLEGAL_CMD = {22}; OCR_CARD_ECC_FAILED = {21}; OCR_CC_ERROR = {20};
      OCR_GENERAL_UNKNOWN_ERROR =  {19}; OCR_STREAM_READ_UNDERRUN = {18}; OCR_STREAM_WRITE_OVERRUN = {17};
      OCR_CID_CSD_OVERWRITE = {16}; OCR_WP_ERASE_SKIP = {15}; OCR_CARD_ECC_DISABLED = {14}; OCR_ERASE_RESET = {13};
      OCR_AKE_SEQ_ERROR = {3}; OCR_ERRORBITS = {3, 13..24, 26..31};

    (*card type*) CARD_SDSC = 0; CARD_SDHC_SDXC = 1; CARD_SECURED = 3;
    (*card states*) CARD_READY = 1; CARD_IDENTIFICATION = 2; CARD_STANDBY = 3; CARD_TRANSFER = 4; CARD_SENDING = 5;
      CARD_RECEIVING = 6; CARD_PROGRAMMING = 7; CARD_DISCONNECTED = 8; CARD_ERROR = 0FFH;

    (*SD commands*) CMD_STOP_TRANSMISSION = SYSTEM.VAL(SET, 12); CMD_SEND_STATUS = SYSTEM.VAL(SET, 13);
      CMD_READ_SINGLE_BLOCK = SYSTEM.VAL(SET, 17); CMD_READ_MULT_BLOCK = SYSTEM.VAL(SET, 18);
      CMD_APP_CMD = SYSTEM.VAL(SET, 55); CMD_APP_SET_WR_BLK_ERASE_COUNT = SYSTEM.VAL(SET, 23);
      CMD_WRITE_SINGLE_BLOCK = SYSTEM.VAL(SET, 24); CMD_WRITE_MULT_BLOCK = SYSTEM.VAL(SET, 25);

    ARG =  BSP.SDIO_BASE + BSP.ARG; CMD =  BSP.SDIO_BASE + BSP.CMD; RESPCMD = BSP.SDIO_BASE + BSP.RESPCMD;
    RESP1 = BSP.SDIO_BASE + BSP.RESP1;
    DTIMER = BSP.SDIO_BASE + BSP.DTIMER; DLEN = BSP.SDIO_BASE + BSP.DLEN;
    DCTRL = BSP.SDIO_BASE + BSP.DCTRL; MASK = BSP.SDIO_BASE + BSP.MASK; FIFO = BSP.SDIO_BASE + BSP.FIFO;
    STA = BSP.SDIO_BASE + BSP.STA; ICR = BSP.SDIO_BASE + BSP.ICR;

    DCTRL_CLEAR_MASK = BSP.DTENm + BSP.DTDIRm + BSP.DTMODEm + BSP.DBLOCKSIZEm;
    CMD_CLEAR_MASK = BSP.CMDINDEXm + BSP.WAITRESPm + BSP.WAITINTm + BSP.WAITPENDm + BSP.CPSMENm + BSP.SDIOSuspendm;

    STATIC_CMD_FLAGS = BSP.CCRCFAILm + BSP.CTIMEOUTm + BSP.CMDRENDm + BSP.CMDSENTm;
    STATIC_DATA_FLAGS = BSP.DCRCFAILm + BSP.DTIMEOUTm + BSP.TXUNDERRm + BSP.RXOVERRm + BSP.DATAENDm + BSP.DBCKENDm + BSP.STBITERRm;
    STATIC_FLAGS = STATIC_CMD_FLAGS + STATIC_DATA_FLAGS + BSP.SDIOITm;

    STREAM3_BASE = BSP.DMA2_BASE + BSP.STREAM_PARAM_SIZE*3;
      s3En = BSP.PeriphBBAlias + (STREAM3_BASE + BSP.SxCR - BSP.PeriphBase + BSP.SxCR_EN DIV 8)*32 + BSP.SxCR_EN MOD 8*4;

    STREAM6_BASE = BSP.DMA2_BASE + BSP.STREAM_PARAM_SIZE*6;
      s6En = BSP.PeriphBBAlias + (STREAM6_BASE + BSP.SxCR - BSP.PeriphBase + BSP.SxCR_EN DIV 8)*32 + BSP.SxCR_EN MOD 8*4;

    BLOCKSIZE = 512;

  TYPE
    SDCardInfoDesc* = RECORD
      CardType*, CardVersion*, Class*, RelCardAdd*, BlockNbr*, BlockSize*, LogBlockNbr*, LogBlockSize*: INTEGER
    END;

    SDHandleDesc* = RECORD
      ErrorCode*: SET;
      SdCard*: SDCardInfoDesc;
      CID*, CSD*: ARRAY 4 OF INTEGER;
      readErrors*, writeErrors*, unrecoverableErrors*: INTEGER;
      buf*: INTEGER (*address of data buffer*)
    END;
    SDHandle = POINTER TO SDHandleDesc;

  VAR hsd*: SDHandle;

  PROCEDURE GetCmdResp1(cmd: SET): SET;
    VAR rc, reg: SET;
  BEGIN REPEAT SYSTEM.GET(STA, rc) UNTIL (rc*(BSP.CCRCFAILm + BSP.CMDRENDm + BSP.CTIMEOUTm) # {}) & (rc*BSP.CMDACTm = {}); (*wait for response*)
    rc := rc*(BSP.CTIMEOUTm + BSP.CCRCFAILm);
    SYSTEM.PUT(ICR, STATIC_CMD_FLAGS); (*clear cmd static flags*)
    IF rc = NONE THEN
      SYSTEM.GET(RESPCMD, reg);
      IF reg # cmd THEN rc := ILLEGAL_CMD (*response is not from the desired command*)
      ELSE SYSTEM.GET(RESP1, reg); (*we have received a response, retrieve it for analysis*)
        IF reg*OCR_ERRORBITS # {} THEN
          IF reg*OCR_ADDR_OUT_OF_RANGE # {} THEN rc := ADD_OUT_OF_RANGE
          ELSIF reg*OCR_ADDR_MISALIGNED # {} THEN rc := ADDR_MISALIGNED
          ELSIF reg*OCR_BLOCK_LEN_ERR # {} THEN rc := BLOCK_LEN_ERR
          ELSIF reg*OCR_ERASE_SEQ_ERR # {} THEN rc := ERASE_SEQ_ERR
          ELSIF reg*OCR_BAD_ERASE_PARAM # {} THEN rc := BAD_ERASE_PARAM
          ELSIF reg*OCR_WRITE_PROT_VIOLATION # {} THEN rc := WRITE_PROT_VIOLATION
          ELSIF reg*OCR_LOCK_UNLOCK_FAILED # {} THEN rc := LOCK_UNLOCK_FAILED
          ELSIF reg*OCR_COM_CRC_FAILED # {} THEN rc := COM_CRC_FAILED
          ELSIF reg*OCR_ILLEGAL_CMD # {} THEN rc := ILLEGAL_CMD
          ELSIF reg*OCR_CARD_ECC_FAILED # {} THEN rc := CARD_ECC_FAILED
          ELSIF reg*OCR_CC_ERROR # {} THEN rc := CC_ERR
          ELSIF reg*OCR_STREAM_READ_UNDERRUN # {} THEN rc := STREAM_READ_UNDERRUN
          ELSIF reg*OCR_STREAM_WRITE_OVERRUN # {} THEN rc := STREAM_WRITE_OVERRUN
          ELSIF reg*OCR_CID_CSD_OVERWRITE # {} THEN rc := CID_CSD_OVERWRITE
          ELSIF reg*OCR_WP_ERASE_SKIP # {} THEN rc := WP_ERASE_SKIP
          ELSIF reg*OCR_CARD_ECC_DISABLED # {} THEN rc := CARD_ECC_DISABLED
          ELSIF reg*OCR_ERASE_RESET # {} THEN rc := ERASE_RESET
          ELSIF reg*OCR_AKE_SEQ_ERROR # {} THEN rc := AKE_SEQ_ERR
          ELSE rc := GENERAL_UNKNOWN_ERR
          END
        END
      END
    END;
   
    RETURN rc
  END GetCmdResp1;

  PROCEDURE GetCardState(): INTEGER;
    VAR reg: SET;
  BEGIN SYSTEM.PUT(ARG, LSL(hsd.SdCard.RelCardAdd, 16)); SYSTEM.GET(CMD, reg);
    SYSTEM.PUT(CMD, reg - CMD_CLEAR_MASK + (CMD_SEND_STATUS + BSP.RESPONSE_SHORT + BSP.CPSMENm));
    hsd.ErrorCode := hsd.ErrorCode + GetCmdResp1(CMD_SEND_STATUS); (*check response*)
    SYSTEM.GET(RESP1, reg);

    RETURN LSR(ORD(reg), 9) MOD 16
  END GetCardState;

 PROCEDURE CmdStopTransfer(): SET;
    VAR reg: SET;
  BEGIN
    SYSTEM.PUT(ARG, 0); SYSTEM.GET(CMD, reg);
    SYSTEM.PUT(CMD, reg - CMD_CLEAR_MASK + (CMD_STOP_TRANSMISSION + BSP.RESPONSE_SHORT + BSP.CPSMENm));

    RETURN GetCmdResp1(CMD_STOP_TRANSMISSION) (*check response*)
  END CmdStopTransfer;

  PROCEDURE SDReadBlocksDMA(pData, blockAdd, nofBlocks: INTEGER): SET;
    VAR reg, lisr, sta: SET;
  BEGIN hsd.ErrorCode := NONE;
    IF nofBlocks < 1 THEN hsd.ErrorCode := INVALID_PARAMETER END;
    IF blockAdd + nofBlocks > hsd.SdCard.LogBlockNbr THEN hsd.ErrorCode := ADD_OUT_OF_RANGE END;
    IF hsd.ErrorCode = NONE THEN
      SYSTEM.PUT(DCTRL, 0); (*Initialize data control register*)
      SYSTEM.PUT(MASK, {}); (*disable all SDIO interrupts*)
      (*Start DMA*)
      SYSTEM.PUT(STREAM3_BASE + BSP.SxPAR, FIFO);
      SYSTEM.PUT(STREAM3_BASE + BSP.SxM0AR, pData);
      SYSTEM.PUT(BSP.DMA2_BASE + BSP.LIFCR, LSL(BSP.STREAM_FLAGSm, BSP.LI_OFS3)); (*Clear all DMA2 stream 3 interrupt flags*)
      SYSTEM.GET(STREAM3_BASE + BSP.SxCR, reg);
      SYSTEM.PUT(STREAM3_BASE + BSP.SxCR, reg - (BSP.HTIEm + BSP.DMEIEm + BSP.SxCR_TCIEm + BSP.TEIEm)); (*disable all interrupts*)
      SYSTEM.GET(STREAM3_BASE + BSP.SxFCR, reg);
      SYSTEM.PUT(STREAM3_BASE + BSP.SxFCR, reg - BSP.FEIEm); (*disable fifo interrupt*)
      SYSTEM.PUT(s3En, 1); (*don't use TRUE because this register must be accessed by words (32 bits)*)
      (*Start SDIO DMA transfer*)
      IF hsd.SdCard.CardType # CARD_SDHC_SDXC THEN blockAdd := blockAdd*512 (*convert block to byte*) END;
      (*Configure the SD DPSM (Data Path State Machine*)
      SYSTEM.PUT(DTIMER, 0FFFFFFFFH); SYSTEM.PUT(DLEN, BLOCKSIZE*nofBlocks);
      SYSTEM.GET(DCTRL, reg); (*bs 512, card to host, block mode, enable data transfer*)
      SYSTEM.PUT(DCTRL, reg - DCTRL_CLEAR_MASK + (BSP.DATABLOCK_SIZE_512B + BSP.DTDIRm + BSP.DTENm + BSP.DMAENm));
      SYSTEM.PUT(ARG, blockAdd); SYSTEM.GET(CMD, reg);
      IF nofBlocks > 1 THEN (*issue multiple blocks read command*)
        SYSTEM.PUT(CMD, reg - CMD_CLEAR_MASK + (CMD_READ_MULT_BLOCK + BSP.RESPONSE_SHORT + BSP.CPSMENm));
        hsd.ErrorCode := GetCmdResp1(CMD_READ_MULT_BLOCK) (*check response*)
      ELSE (*issue single block read command*)
        SYSTEM.PUT(CMD, reg - CMD_CLEAR_MASK + (CMD_READ_SINGLE_BLOCK + BSP.RESPONSE_SHORT + BSP.CPSMENm));
        hsd.ErrorCode := GetCmdResp1(CMD_READ_SINGLE_BLOCK) (*check response*)
      END;
      IF hsd.ErrorCode = NONE THEN (*wait for end of operation*)
        SYSTEM.GET(BSP.DMA2_BASE + BSP.LISR, lisr); SYSTEM.GET(STA, sta);
        WHILE ~(BSP.TEIFx + BSP.LI_OFS3 IN lisr) &
          (sta*(BSP.DCRCFAILm + BSP.DTIMEOUTm + BSP.RXOVERRm + BSP.DATAENDm + BSP.STBITERRm) = {}) DO
          BSP.Delayus(100); SYSTEM.GET(BSP.DMA2_BASE + BSP.LISR, lisr); SYSTEM.GET(STA, sta)
        END;
        hsd.ErrorCode := CmdStopTransfer();
        IF ~(BSP.DATAEND IN sta) THEN
          SYSTEM.PUT(s3En, 0); (*abort DMA transfer*)
          IF BSP.TEIFx + BSP.LI_OFS3 IN lisr THEN hsd.ErrorCode := hsd.ErrorCode + ERROR_DMA END;
          IF BSP.DCRCFAIL IN sta THEN hsd.ErrorCode := hsd.ErrorCode + DATA_CRC_FAIL END;
          IF BSP.DTIMEOUT IN sta THEN hsd.ErrorCode := hsd.ErrorCode + DATA_TIMEOUT END;
          IF BSP.RXOVERR IN sta THEN hsd.ErrorCode := hsd.ErrorCode + RX_OVERRUN END;
          IF BSP.TXUNDERR IN sta THEN hsd.ErrorCode := hsd.ErrorCode + TX_UNDERRUN END;
          IF BSP.STBITERR IN sta THEN hsd.ErrorCode := hsd.ErrorCode + DATA_TIMEOUT END
        END
      END;
      REPEAT SYSTEM.GET(s3En, reg) UNTIL reg = NONE; (*wait until DMA transfer is complete*)
      SYSTEM.PUT(BSP.DMA2_BASE + BSP.LIFCR, LSL(BSP.STREAM_FLAGSm, BSP.LI_OFS3)); (*Clear all DMA2 stream 3 interrupt flags*)
      SYSTEM.PUT(ICR, STATIC_FLAGS) (*clear all static flags*)
    END;

    RETURN hsd.ErrorCode
  END SDReadBlocksDMA;

  PROCEDURE SDWriteBlocksDMA(pData, blockAdd, nofBlocks: INTEGER): SET;
    VAR reg, hisr, sta: SET;
  BEGIN hsd.ErrorCode := NONE;
    IF nofBlocks < 1 THEN hsd.ErrorCode := INVALID_PARAMETER END;
    IF blockAdd + nofBlocks > hsd.SdCard.LogBlockNbr THEN hsd.ErrorCode := ADD_OUT_OF_RANGE END;
    IF hsd.ErrorCode = NONE THEN
      SYSTEM.PUT(DCTRL, 0); (*Initialize data control register*)
      SYSTEM.PUT(MASK, {}); (*disable all SDIO interrupts*)

      (*Start DMA*)
      SYSTEM.PUT(STREAM6_BASE + BSP.SxPAR, FIFO);
      SYSTEM.PUT(STREAM6_BASE + BSP.SxM0AR, pData);
      SYSTEM.PUT(BSP.DMA2_BASE + BSP.HIFCR, LSL(BSP.STREAM_FLAGSm, BSP.HI_OFS6)); (*Clear all DMA2 stream 6 interrupt flags*)
      SYSTEM.GET(STREAM6_BASE + BSP.SxCR, reg);
      SYSTEM.PUT(STREAM6_BASE + BSP.SxCR, reg - (BSP.HTIEm + BSP.DMEIEm + BSP.SxCR_TCIEm + BSP.TEIEm)); (*disable all interrupts*)
      SYSTEM.GET(STREAM6_BASE + BSP.SxFCR, reg);
      SYSTEM.PUT(STREAM6_BASE + BSP.SxFCR, reg - BSP.FEIEm); (*disable fifo interrupt*)
      SYSTEM.PUT(s6En, 1); (*don't use TRUE because this register must be accessed by words (32 bits)*)

      IF hsd.SdCard.CardType # CARD_SDHC_SDXC THEN blockAdd := blockAdd*512 (*convert block to byte*) END;
      IF nofBlocks > 1 THEN (*multiple blocks write*)
        SYSTEM.PUT(ARG, LSL(hsd.SdCard.RelCardAdd, 16)); (*Send CMD55 APP_CMD with argument as card's RCA*)
        SYSTEM.PUT(CMD, reg - CMD_CLEAR_MASK + (CMD_APP_CMD + BSP.RESPONSE_SHORT + BSP.CPSMENm));
        hsd.ErrorCode := GetCmdResp1(CMD_APP_CMD);
        IF hsd.ErrorCode = NONE THEN SYSTEM.PUT(ARG, nofBlocks); (*Send ACMD23 with argument as number of blocks*)
          SYSTEM.PUT(CMD, reg - CMD_CLEAR_MASK + (CMD_APP_SET_WR_BLK_ERASE_COUNT + BSP.RESPONSE_SHORT + BSP.CPSMENm));
          hsd.ErrorCode := GetCmdResp1(CMD_APP_SET_WR_BLK_ERASE_COUNT);
        END; (*now the SD card knows how many blocks will be overwritten*)
        IF hsd.ErrorCode = NONE THEN 
          SYSTEM.PUT(ARG, blockAdd); SYSTEM.GET(CMD, reg);
          SYSTEM.PUT(CMD, reg - CMD_CLEAR_MASK + (CMD_WRITE_MULT_BLOCK + BSP.RESPONSE_SHORT + BSP.CPSMENm));
          hsd.ErrorCode := GetCmdResp1(CMD_WRITE_MULT_BLOCK) (*check response*)
        END
      ELSE (*issue single block write command*)
        SYSTEM.PUT(ARG, blockAdd); SYSTEM.GET(CMD, reg);
        SYSTEM.PUT(CMD, reg - CMD_CLEAR_MASK + (CMD_WRITE_SINGLE_BLOCK + BSP.RESPONSE_SHORT + BSP.CPSMENm));
        hsd.ErrorCode := GetCmdResp1(CMD_WRITE_SINGLE_BLOCK) (*check response*)
      END;

      IF hsd.ErrorCode = NONE THEN (*Configure the SD DPSM (Data Path State Machine*)
        SYSTEM.PUT(DTIMER, 0FFFFFFFFH); SYSTEM.PUT(DLEN, BLOCKSIZE*nofBlocks);
        SYSTEM.GET(DCTRL, reg); (*bs 512, host to card, block mode, enable data transfer, DMA enabled*)
        SYSTEM.PUT(DCTRL, reg - DCTRL_CLEAR_MASK + (BSP.DATABLOCK_SIZE_512B + BSP.DTENm + BSP.DMAENm));

        (*wait for end of operation*)
        SYSTEM.GET(BSP.DMA2_BASE + BSP.HISR, hisr); SYSTEM.GET(STA, sta);
        WHILE ~(BSP.TEIFx + BSP.HI_OFS6 IN hisr) &
          (sta*(BSP.DCRCFAILm + BSP.DTIMEOUTm + BSP.TXUNDERRm + BSP.DATAENDm + BSP.STBITERRm) = {}) DO
          BSP.Delayus(100); SYSTEM.GET(BSP.DMA2_BASE + BSP.HISR, hisr); SYSTEM.GET(STA, sta)
        END;
        hsd.ErrorCode := CmdStopTransfer();
        IF ~(BSP.DATAEND IN sta) THEN
          SYSTEM.PUT(s6En, 0); (*abort DMA transfer*)
          IF BSP.TEIFx + BSP.HI_OFS6 IN hisr THEN hsd.ErrorCode := hsd.ErrorCode + ERROR_DMA END;
          IF BSP.DCRCFAIL IN sta THEN hsd.ErrorCode := hsd.ErrorCode + DATA_CRC_FAIL END;
          IF BSP.DTIMEOUT IN sta THEN hsd.ErrorCode := hsd.ErrorCode + DATA_TIMEOUT END;
          IF BSP.RXOVERR IN sta THEN hsd.ErrorCode := hsd.ErrorCode + RX_OVERRUN END;
          IF BSP.TXUNDERR IN sta THEN hsd.ErrorCode := hsd.ErrorCode + TX_UNDERRUN END;
          IF BSP.STBITERR IN sta THEN hsd.ErrorCode := hsd.ErrorCode + DATA_TIMEOUT END
        END
      END;
      REPEAT SYSTEM.GET(s6En, reg) UNTIL reg = NONE; (*wait until DMA transfer is complete*)
      SYSTEM.PUT(BSP.DMA2_BASE + BSP.HIFCR, LSL(BSP.STREAM_FLAGSm, BSP.HI_OFS6)); (*Clear all DMA2 stream 6 interrupt flags*)
      SYSTEM.PUT(ICR, STATIC_FLAGS) (*clear all static flags*)
    END;

    RETURN hsd.ErrorCode
  END SDWriteBlocksDMA;

  PROCEDURE Read*(src, dst, nofblocks: INTEGER);
  VAR rc: SET;
  BEGIN BSP.ledsOnOff({0}, {});
    IF nofblocks > 128 THEN BSP.ledsOnOff({1}, {0}); ASSERT(FALSE) END;
    rc := SDReadBlocksDMA(hsd.buf, src, nofblocks);
    IF rc = NONE THEN
      WHILE GetCardState() #CARD_TRANSFER DO BSP.Delayus(1000) END
    END;

    IF hsd.ErrorCode = NONE THEN SYSTEM.COPY(hsd.buf, dst, nofblocks*(512 DIV 4)) ELSE INC(hsd.readErrors); BSP.ledsOnOff({1}, {}) END;
    BSP.ledsOnOff({}, {0});
  END Read;

  PROCEDURE Write*(dst, src, nofblocks: INTEGER);
  VAR rc: SET; retry: INTEGER;
  BEGIN BSP.ledsOnOff({0}, {});
    IF nofblocks > 128 THEN BSP.ledsOnOff({1}, {0}); ASSERT(FALSE) END;
    SYSTEM.COPY(src, hsd.buf, nofblocks*(512 DIV 4));
    REPEAT rc := SDWriteBlocksDMA(hsd.buf, dst, nofblocks);
      IF rc = NONE THEN
        WHILE GetCardState() #CARD_TRANSFER DO BSP.Delayus(1000) END
      END;

      IF hsd.ErrorCode # NONE THEN INC(hsd.writeErrors); BSP.ledsOnOff({1}, {}) END;
      DEC(retry)
    UNTIL (hsd.ErrorCode = NONE) OR (retry = 0);
    IF (hsd.ErrorCode # NONE) THEN INC(hsd.unrecoverableErrors) END;
    BSP.ledsOnOff({}, {0});
  END Write;

  PROCEDURE Init;
    VAR bootpar: INTEGER;
  BEGIN SYSTEM.GET(40002850H, bootpar); SYSTEM.GET(bootpar+4, hsd);
    hsd.readErrors := 0; hsd.writeErrors := 0; hsd.unrecoverableErrors := 0
  END Init;

BEGIN Init
END SDCard.

OM4Tool.DecSym SDCard.sm4
decode SDCard.sm4
SDCard 4A193F90  1
   5 SDCardInfoDesc [15  form = 13 [^9]  exno = 1  extlev = 0  size = 32 { LogBlockSize [^4]  28 LogBlockNbr [^4]  24 BlockSize [^4]  20 BlockNbr [^4]  16 RelCardAdd [^4]  12 Class [^4]   8 CardVersion [^4]   4 CardType [^4]   0}]()
   5 SDHandleDesc [16  form = 13 [^9]  exno = 2  extlev = 0  size = 84 { buf [^4]  80 unrecoverableErrors [^4]  76 writeErrors [^4]  72 readErrors [^4]  68 CSD [0  form = 12 [^4]  len = 4  size = 16]  52 CID [0  form = 12 [^4]  len = 4  size = 16]  36 SdCard [^15]   4 ErrorCode [^6]   0}]()
   2 hsd [17  form = 7 [^16]]     3
   1 Read [0  form = 10 [^9]( class = 2 [^4] class = 2 [^4] class = 2 [^4])]       4
   1 Write [0  form = 10 [^9]( class = 2 [^4] class = 2 [^4] class = 2 [^4])]       5


OM4Tool.DecObj SDCard.m4c
decode SDCard.m4c
SDCard 4A193F90   2   3872
imports:
	BSP F222E0EE
type descriptors
 00000040 FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 00000080 FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
strings

data     4
code
commands:
entries
 00000EB0 00000000 00000014 00000000 00000C3E 00000D18
pointer refs
     0
fixP =  00000E3A
fixV =  00000E92
fixC =  00000000
fixT =  00000000
entry =  00000EB0
 00000000	     B082	SUB SP SP #8
 00000002	     B401	PUSH R0
 00000004	     B500	PUSH LR
 00000006	 F6424034	MOV R0 #11316
 0000000A	 F2C40001	MOVT R0 #16385
 0000000E	     6800	LDR R0 [ R0 + 0 ]
 00000010	     9002	STR R0 [ SP + 8 ]
 00000012	     9802	LDR R0 [ SP + 8 ]
 00000014	 F0100045	ANDS R0 R0 #69
 00000018	 F43FAFF5	BEQ #-22, goes to  00000006
 0000001C	     9802	LDR R0 [ SP + 8 ]
 0000001E	 F4106000	ANDS R0 R0 #2048
 00000022	     D1F0	BNE #-32, goes to  00000006
 00000024	     9802	LDR R0 [ SP + 8 ]
 00000026	 F0100005	ANDS R0 R0 #5
 0000002A	     9002	STR R0 [ SP + 8 ]
 0000002C	 F6424038	MOV R0 #11320
 00000030	 F2C40001	MOVT R0 #16385
 00000034	     21C5	MOVS R1 #197
 00000036	     6001	STR R1 [  R0 + 0 ]
 00000038	     9802	LDR R0 [ SP + 8 ]
 0000003A	     2800	CMP R0 #0
 0000003C	 F04080D4	BNE #424, goes to  000001E8
 00000040	 F6424010	MOV R0 #11280
 00000044	 F2C40001	MOVT R0 #16385
 00000048	     6800	LDR R0 [ R0 + 0 ]
 0000004A	     9003	STR R0 [ SP + 12 ]
 0000004C	     9803	LDR R0 [ SP + 12 ]
 0000004E	     9901	LDR R1 [ SP + 4 ]
 00000050	     4288	CMP R0 R1
 00000052	 F0008005	BEQ #10, goes to  00000060
 00000056	 F45F5000	MOVS R0 #8192
 0000005A	     9002	STR R0 [ SP + 8 ]
 0000005C	 F000B8C4	B #392, goes to  000001E8
 00000060	 F6424014	MOV R0 #11284
 00000064	 F2C40001	MOVT R0 #16385
 00000068	     6800	LDR R0 [ R0 + 0 ]
 0000006A	     9003	STR R0 [ SP + 12 ]
 0000006C	     9803	LDR R0 [ SP + 12 ]
 0000006E	 F24E0108	MOV R1 #57352
 00000072	 F6CF51FF	MOVT R1 #65023
 00000076	 EA100001	ANDS R0 R0 R1 LSL #0
 0000007A	 F00080B5	BEQ #362, goes to  000001E8
 0000007E	     9803	LDR R0 [ SP + 12 ]
 00000080	 F0104000	ANDS R0 R0 # -2147483648
 00000084	 F0008005	BEQ #10, goes to  00000092
 00000088	 F05F7000	MOVS R0 #33554432
 0000008C	     9002	STR R0 [ SP + 8 ]
 0000008E	 F000B8AB	B #342, goes to  000001E8
 00000092	     9803	LDR R0 [ SP + 12 ]
 00000094	 F0104080	ANDS R0 R0 #1073741824
 00000098	 F0008004	BEQ #8, goes to  000000A4
 0000009C	     2040	MOVS R0 #64
 0000009E	     9002	STR R0 [ SP + 8 ]
 000000A0	 F000B8A2	B #324, goes to  000001E8
 000000A4	     9803	LDR R0 [ SP + 12 ]
 000000A6	 F0105000	ANDS R0 R0 #536870912
 000000AA	 F0008004	BEQ #8, goes to  000000B6
 000000AE	     2080	MOVS R0 #128
 000000B0	     9002	STR R0 [ SP + 8 ]
 000000B2	 F000B899	B #306, goes to  000001E8
 000000B6	     9803	LDR R0 [ SP + 12 ]
 000000B8	 F0105080	ANDS R0 R0 #268435456
 000000BC	 F0008005	BEQ #10, goes to  000000CA
 000000C0	 F45F7080	MOVS R0 #256
 000000C4	     9002	STR R0 [ SP + 8 ]
 000000C6	 F000B88F	B #286, goes to  000001E8
 000000CA	     9803	LDR R0 [ SP + 12 ]
 000000CC	 F0106000	ANDS R0 R0 #134217728
 000000D0	 F0008005	BEQ #10, goes to  000000DE
 000000D4	 F45F7000	MOVS R0 #512
 000000D8	     9002	STR R0 [ SP + 8 ]
 000000DA	 F000B885	B #266, goes to  000001E8
 000000DE	     9803	LDR R0 [ SP + 12 ]
 000000E0	 F0106080	ANDS R0 R0 #67108864
 000000E4	 F0008005	BEQ #10, goes to  000000F2
 000000E8	 F45F6080	MOVS R0 #1024
 000000EC	     9002	STR R0 [ SP + 8 ]
 000000EE	 F000B87B	B #246, goes to  000001E8
 000000F2	     9803	LDR R0 [ SP + 12 ]
 000000F4	 F0107080	ANDS R0 R0 #16777216
 000000F8	 F0008005	BEQ #10, goes to  00000106
 000000FC	 F45F6000	MOVS R0 #2048
 00000100	     9002	STR R0 [ SP + 8 ]
 00000102	 F000B871	B #226, goes to  000001E8
 00000106	     9803	LDR R0 [ SP + 12 ]
 00000108	 F4100000	ANDS R0 R0 #8388608
 0000010C	 F0008005	BEQ #10, goes to  0000011A
 00000110	 F45F5080	MOVS R0 #4096
 00000114	     9002	STR R0 [ SP + 8 ]
 00000116	 F000B867	B #206, goes to  000001E8
 0000011A	     9803	LDR R0 [ SP + 12 ]
 0000011C	 F4100080	ANDS R0 R0 #4194304
 00000120	 F0008005	BEQ #10, goes to  0000012E
 00000124	 F45F5000	MOVS R0 #8192
 00000128	     9002	STR R0 [ SP + 8 ]
 0000012A	 F000B85D	B #186, goes to  000001E8
 0000012E	     9803	LDR R0 [ SP + 12 ]
 00000130	 F4101000	ANDS R0 R0 #2097152
 00000134	 F0008005	BEQ #10, goes to  00000142
 00000138	 F45F4080	MOVS R0 #16384
 0000013C	     9002	STR R0 [ SP + 8 ]
 0000013E	 F000B853	B #166, goes to  000001E8
 00000142	     9803	LDR R0 [ SP + 12 ]
 00000144	 F4101080	ANDS R0 R0 #1048576
 00000148	 F0008005	BEQ #10, goes to  00000156
 0000014C	 F45F4000	MOVS R0 #32768
 00000150	     9002	STR R0 [ SP + 8 ]
 00000152	 F000B849	B #146, goes to  000001E8
 00000156	     9803	LDR R0 [ SP + 12 ]
 00000158	 F4102080	ANDS R0 R0 #262144
 0000015C	 F0008005	BEQ #10, goes to  0000016A
 00000160	 F45F3000	MOVS R0 #131072
 00000164	     9002	STR R0 [ SP + 8 ]
 00000166	 F000B83F	B #126, goes to  000001E8
 0000016A	     9803	LDR R0 [ SP + 12 ]
 0000016C	 F4103000	ANDS R0 R0 #131072
 00000170	 F0008005	BEQ #10, goes to  0000017E
 00000174	 F45F2080	MOVS R0 #262144
 00000178	     9002	STR R0 [ SP + 8 ]
 0000017A	 F000B835	B #106, goes to  000001E8
 0000017E	     9803	LDR R0 [ SP + 12 ]
 00000180	 F4103080	ANDS R0 R0 #65536
 00000184	 F0008005	BEQ #10, goes to  00000192
 00000188	 F45F2000	MOVS R0 #524288
 0000018C	     9002	STR R0 [ SP + 8 ]
 0000018E	 F000B82B	B #86, goes to  000001E8
 00000192	     9803	LDR R0 [ SP + 12 ]
 00000194	 F4104000	ANDS R0 R0 #32768
 00000198	 F0008005	BEQ #10, goes to  000001A6
 0000019C	 F45F1080	MOVS R0 #1048576
 000001A0	     9002	STR R0 [ SP + 8 ]
 000001A2	 F000B821	B #66, goes to  000001E8
 000001A6	     9803	LDR R0 [ SP + 12 ]
 000001A8	 F4104080	ANDS R0 R0 #16384
 000001AC	 F0008005	BEQ #10, goes to  000001BA
 000001B0	 F45F1000	MOVS R0 #2097152
 000001B4	     9002	STR R0 [ SP + 8 ]
 000001B6	 F000B817	B #46, goes to  000001E8
 000001BA	     9803	LDR R0 [ SP + 12 ]
 000001BC	 F4105000	ANDS R0 R0 #8192
 000001C0	 F0008005	BEQ #10, goes to  000001CE
 000001C4	 F45F0080	MOVS R0 #4194304
 000001C8	     9002	STR R0 [ SP + 8 ]
 000001CA	 F000B80D	B #26, goes to  000001E8
 000001CE	     9803	LDR R0 [ SP + 12 ]
 000001D0	 F0100008	ANDS R0 R0 #8
 000001D4	 F0008005	BEQ #10, goes to  000001E2
 000001D8	 F45F0000	MOVS R0 #8388608
 000001DC	     9002	STR R0 [ SP + 8 ]
 000001DE	 F000B803	B #6, goes to  000001E8
 000001E2	 F45F3080	MOVS R0 #65536
 000001E6	     9002	STR R0 [ SP + 8 ]
 000001E8	     9802	LDR R0 [ SP + 8 ]
 000001EA	 F85DEB04	LDR LR [ SP ] + 4
 000001EE	     B003	ADD SP SP #12
 000001F0	     4770	BX LR
 000001F2	     B081	SUB SP SP #4
 000001F4	     B500	PUSH LR
 000001F6	 000000FB	MOV R0 lower 16-bits base(0), next at  00000000
 000001FA	 00000000	MOVT R0 higher 16-bits var + 0
 000001FE	     6800	LDR R0 [ R0 + 0 ]
 00000200	     2800	CMP R0 #0
 00000202	     BF08	IT EQ
 00000204	 EC02E334	TrapEQ 4 at pos 5939
 00000208	     6900	LDR R0 [ R0 + 16 ]
 0000020A	     0400	LSLS R0 R0 #16
 0000020C	 F6424108	MOV R1 #11272
 00000210	 F2C40101	MOVT R1 #16385
 00000214	     6008	STR R0 [  R1 + 0 ]
 00000216	 F642400C	MOV R0 #11276
 0000021A	 F2C40001	MOVT R0 #16385
 0000021E	     6800	LDR R0 [ R0 + 0 ]
 00000220	     9001	STR R0 [ SP + 4 ]
 00000222	     9801	LDR R0 [ SP + 4 ]
 00000224	 F64071FF	MOV R1 #4095
 00000228	 EA300001	BICS R0 R0 R1 LSL #0
 0000022C	 F240414D	MOV R1 #1101
 00000230	 EA500001	ORRS R0 R0 R1 LSL #0
 00000234	 F642410C	MOV R1 #11276
 00000238	 F2C40101	MOVT R1 #16385
 0000023C	     6008	STR R0 [  R1 + 0 ]
 0000023E	 00000024	MOV R0 lower 16-bits base(0), next at  000001F6
 00000242	 00000000	MOVT R0 higher 16-bits var + 0
 00000246	     6800	LDR R0 [ R0 + 0 ]
 00000248	     2800	CMP R0 #0
 0000024A	     BF08	IT EQ
 0000024C	 EC02F4F4	TrapEQ 4 at pos 6095
 00000250	 10000009	MOV R1 lower 16-bits base(0), next at  0000023E
 00000254	 00000000	MOVT R1 higher 16-bits var + 0
 00000258	     6809	LDR R1 [ R1 + 0 ]
 0000025A	     2900	CMP R1 #0
 0000025C	     BF08	IT EQ
 0000025E	 EC02F604	TrapEQ 4 at pos 6112
 00000262	     B403	PUSH R0 R1
 00000264	     200D	MOVS R0 #13
 00000266	 F7FFFECB	BL #-618, goes to  00000000
 0000026A	     4602	MOV R2 R0
 0000026C	     BC03	POP R0 R1
 0000026E	     6809	LDR R1 [ R1 + 0 ]
 00000270	     4311	ORRS R1 R1 R2
 00000272	     6001	STR R1 [  R0 + 0 ]
 00000274	 F6424014	MOV R0 #11284
 00000278	 F2C40001	MOVT R0 #16385
 0000027C	     6800	LDR R0 [ R0 + 0 ]
 0000027E	     9001	STR R0 [ SP + 4 ]
 00000280	     9801	LDR R0 [ SP + 4 ]
 00000282	     0A40	LSRS R0 R0 #9
 00000284	 F36F101F	BFC R0 #4 #28
 00000288	 F85DEB04	LDR LR [ SP ] + 4
 0000028C	     B001	ADD SP SP #4
 0000028E	     4770	BX LR
 00000290	     B081	SUB SP SP #4
 00000292	     B500	PUSH LR
 00000294	 F6424008	MOV R0 #11272
 00000298	 F2C40001	MOVT R0 #16385
 0000029C	     2100	MOVS R1 #0
 0000029E	     6001	STR R1 [  R0 + 0 ]
 000002A0	 F642400C	MOV R0 #11276
 000002A4	 F2C40001	MOVT R0 #16385
 000002A8	     6800	LDR R0 [ R0 + 0 ]
 000002AA	     9001	STR R0 [ SP + 4 ]
 000002AC	     9801	LDR R0 [ SP + 4 ]
 000002AE	 F64071FF	MOV R1 #4095
 000002B2	 EA300001	BICS R0 R0 R1 LSL #0
 000002B6	 F240414C	MOV R1 #1100
 000002BA	 EA500001	ORRS R0 R0 R1 LSL #0
 000002BE	 F642410C	MOV R1 #11276
 000002C2	 F2C40101	MOVT R1 #16385
 000002C6	     6008	STR R0 [  R1 + 0 ]
 000002C8	     200C	MOVS R0 #12
 000002CA	 F7FFFE99	BL #-718, goes to  00000000
 000002CE	 F85DEB04	LDR LR [ SP ] + 4
 000002D2	     B001	ADD SP SP #4
 000002D4	     4770	BX LR
 000002D6	     B083	SUB SP SP #12
 000002D8	     B407	PUSH R0 R1 R2
 000002DA	     B500	PUSH LR
 000002DC	 00000046	MOV R0 lower 16-bits base(0), next at  00000250
 000002E0	 00000000	MOVT R0 higher 16-bits var + 0
 000002E4	     6800	LDR R0 [ R0 + 0 ]
 000002E6	     2800	CMP R0 #0
 000002E8	     BF08	IT EQ
 000002EA	 EC0340F4	TrapEQ 4 at pos 6671
 000002EE	     2100	MOVS R1 #0
 000002F0	     6001	STR R1 [  R0 + 0 ]
 000002F2	     9803	LDR R0 [ SP + 12 ]
 000002F4	     2801	CMP R0 #1
 000002F6	 F280800C	BGE #24, goes to  00000312
 000002FA	 0000000F	MOV R0 lower 16-bits base(0), next at  000002DC
 000002FE	 00000000	MOVT R0 higher 16-bits var + 0
 00000302	     6800	LDR R0 [ R0 + 0 ]
 00000304	     2800	CMP R0 #0
 00000306	     BF08	IT EQ
 00000308	 EC034404	TrapEQ 4 at pos 6720
 0000030C	 F05F6100	MOVS R1 #134217728
 00000310	     6001	STR R1 [  R0 + 0 ]
 00000312	     9802	LDR R0 [ SP + 8 ]
 00000314	     9903	LDR R1 [ SP + 12 ]
 00000316	     1840	ADDS R0 R0 R1
 00000318	 1000000F	MOV R1 lower 16-bits base(0), next at  000002FA
 0000031C	 00000000	MOVT R1 higher 16-bits var + 0
 00000320	     6809	LDR R1 [ R1 + 0 ]
 00000322	     2900	CMP R1 #0
 00000324	     BF08	IT EQ
 00000326	 EC035034	TrapEQ 4 at pos 6787
 0000032A	     69C9	LDR R1 [ R1 + 28 ]
 0000032C	     4288	CMP R0 R1
 0000032E	 F340800C	BLE #24, goes to  0000034A
 00000332	 0000000D	MOV R0 lower 16-bits base(0), next at  00000318
 00000336	 00000000	MOVT R0 higher 16-bits var + 0
 0000033A	     6800	LDR R0 [ R0 + 0 ]
 0000033C	     2800	CMP R0 #0
 0000033E	     BF08	IT EQ
 00000340	 EC035224	TrapEQ 4 at pos 6818
 00000344	 F05F7100	MOVS R1 #33554432
 00000348	     6001	STR R1 [  R0 + 0 ]
 0000034A	 0000000C	MOV R0 lower 16-bits base(0), next at  00000332
 0000034E	 00000000	MOVT R0 higher 16-bits var + 0
 00000352	     6800	LDR R0 [ R0 + 0 ]
 00000354	     2800	CMP R0 #0
 00000356	     BF08	IT EQ
 00000358	 EC035504	TrapEQ 4 at pos 6864
 0000035C	     6800	LDR R0 [ R0 + 0 ]
 0000035E	     2800	CMP R0 #0
 00000360	 F04081CA	BNE #916, goes to  000006F8
 00000364	 F642402C	MOV R0 #11308
 00000368	 F2C40001	MOVT R0 #16385
 0000036C	     2100	MOVS R1 #0
 0000036E	     6001	STR R1 [  R0 + 0 ]
 00000370	 F642403C	MOV R0 #11324
 00000374	 F2C40001	MOVT R0 #16385
 00000378	     2100	MOVS R1 #0
 0000037A	     6001	STR R1 [  R0 + 0 ]
 0000037C	 F2464060	MOV R0 #25696
 00000380	 F2C40002	MOVT R0 #16386
 00000384	 F6424180	MOV R1 #11392
 00000388	 F2C40101	MOVT R1 #16385
 0000038C	     6001	STR R1 [  R0 + 0 ]
 0000038E	 F2464064	MOV R0 #25700
 00000392	 F2C40002	MOVT R0 #16386
 00000396	     9901	LDR R1 [ SP + 4 ]
 00000398	     6001	STR R1 [  R0 + 0 ]
 0000039A	 F2464008	MOV R0 #25608
 0000039E	 F2C40002	MOVT R0 #16386
 000003A2	 F05F6174	MOVS R1 #255852544
 000003A6	     6001	STR R1 [  R0 + 0 ]
 000003A8	 F2464058	MOV R0 #25688
 000003AC	 F2C40002	MOVT R0 #16386
 000003B0	     6800	LDR R0 [ R0 + 0 ]
 000003B2	     9004	STR R0 [ SP + 16 ]
 000003B4	     9804	LDR R0 [ SP + 16 ]
 000003B6	 F030001E	BICS R0 R0 #30
 000003BA	 F2464158	MOV R1 #25688
 000003BE	 F2C40102	MOVT R1 #16386
 000003C2	     6008	STR R0 [  R1 + 0 ]
 000003C4	 F246406C	MOV R0 #25708
 000003C8	 F2C40002	MOVT R0 #16386
 000003CC	     6800	LDR R0 [ R0 + 0 ]
 000003CE	     9004	STR R0 [ SP + 16 ]
 000003D0	     9804	LDR R0 [ SP + 16 ]
 000003D2	 F0300080	BICS R0 R0 #128
 000003D6	 F246416C	MOV R1 #25708
 000003DA	 F2C40102	MOVT R1 #16386
 000003DE	     6008	STR R0 [  R1 + 0 ]
 000003E0	 F6483000	MOV R0 #35584
 000003E4	 F2C4204C	MOVT R0 #16972
 000003E8	     2101	MOVS R1 #1
 000003EA	     6001	STR R1 [  R0 + 0 ]
 000003EC	 00000051	MOV R0 lower 16-bits base(0), next at  0000034A
 000003F0	 00000000	MOVT R0 higher 16-bits var + 0
 000003F4	     6800	LDR R0 [ R0 + 0 ]
 000003F6	     2800	CMP R0 #0
 000003F8	     BF08	IT EQ
 000003FA	 EC03C2B4	TrapEQ 4 at pos 7723
 000003FE	     6840	LDR R0 [ R0 + 4 ]
 00000400	     2801	CMP R0 #1
 00000402	 F0008003	BEQ #6, goes to  0000040C
 00000406	     9802	LDR R0 [ SP + 8 ]
 00000408	     0240	LSLS R0 R0 #9
 0000040A	     9002	STR R0 [ SP + 8 ]
 0000040C	 F6424024	MOV R0 #11300
 00000410	 F2C40001	MOVT R0 #16385
 00000414	 F05F31FF	MOVS R1 #-1
 00000418	     6001	STR R1 [  R0 + 0 ]
 0000041A	     9803	LDR R0 [ SP + 12 ]
 0000041C	     0240	LSLS R0 R0 #9
 0000041E	 F6424128	MOV R1 #11304
 00000422	 F2C40101	MOVT R1 #16385
 00000426	     6008	STR R0 [  R1 + 0 ]
 00000428	 F642402C	MOV R0 #11308
 0000042C	 F2C40001	MOVT R0 #16385
 00000430	     6800	LDR R0 [ R0 + 0 ]
 00000432	     9004	STR R0 [ SP + 16 ]
 00000434	     9804	LDR R0 [ SP + 16 ]
 00000436	 F03000F7	BICS R0 R0 #247
 0000043A	 F050009B	ORRS R0 R0 #155
 0000043E	 F642412C	MOV R1 #11308
 00000442	 F2C40101	MOVT R1 #16385
 00000446	     6008	STR R0 [  R1 + 0 ]
 00000448	 F6424008	MOV R0 #11272
 0000044C	 F2C40001	MOVT R0 #16385
 00000450	     9902	LDR R1 [ SP + 8 ]
 00000452	     6001	STR R1 [  R0 + 0 ]
 00000454	 F642400C	MOV R0 #11276
 00000458	 F2C40001	MOVT R0 #16385
 0000045C	     6800	LDR R0 [ R0 + 0 ]
 0000045E	     9004	STR R0 [ SP + 16 ]
 00000460	     9803	LDR R0 [ SP + 12 ]
 00000462	     2801	CMP R0 #1
 00000464	 F3408020	BLE #64, goes to  000004A8
 00000468	     9804	LDR R0 [ SP + 16 ]
 0000046A	 F64071FF	MOV R1 #4095
 0000046E	 EA300001	BICS R0 R0 R1 LSL #0
 00000472	 F2404152	MOV R1 #1106
 00000476	 EA500001	ORRS R0 R0 R1 LSL #0
 0000047A	 F642410C	MOV R1 #11276
 0000047E	 F2C40101	MOVT R1 #16385
 00000482	     6008	STR R0 [  R1 + 0 ]
 00000484	 0000004C	MOV R0 lower 16-bits base(0), next at  000003EC
 00000488	 00000000	MOVT R0 higher 16-bits var + 0
 0000048C	     6800	LDR R0 [ R0 + 0 ]
 0000048E	     2800	CMP R0 #0
 00000490	     BF08	IT EQ
 00000492	 EC0414E4	TrapEQ 4 at pos 8398
 00000496	     B401	PUSH R0
 00000498	     2012	MOVS R0 #18
 0000049A	 F7FFFDB1	BL #-1182, goes to  00000000
 0000049E	     4601	MOV R1 R0
 000004A0	     BC01	POP R0
 000004A2	     6001	STR R1 [  R0 + 0 ]
 000004A4	 F000B81E	B #60, goes to  000004E4
 000004A8	     9804	LDR R0 [ SP + 16 ]
 000004AA	 F64071FF	MOV R1 #4095
 000004AE	 EA300001	BICS R0 R0 R1 LSL #0
 000004B2	 F2404151	MOV R1 #1105
 000004B6	 EA500001	ORRS R0 R0 R1 LSL #0
 000004BA	 F642410C	MOV R1 #11276
 000004BE	 F2C40101	MOVT R1 #16385
 000004C2	     6008	STR R0 [  R1 + 0 ]
 000004C4	 00000020	MOV R0 lower 16-bits base(0), next at  00000484
 000004C8	 00000000	MOVT R0 higher 16-bits var + 0
 000004CC	     6800	LDR R0 [ R0 + 0 ]
 000004CE	     2800	CMP R0 #0
 000004D0	     BF08	IT EQ
 000004D2	 EC043364	TrapEQ 4 at pos 8630
 000004D6	     B401	PUSH R0
 000004D8	     2011	MOVS R0 #17
 000004DA	 F7FFFD91	BL #-1246, goes to  00000000
 000004DE	     4601	MOV R1 R0
 000004E0	     BC01	POP R0
 000004E2	     6001	STR R1 [  R0 + 0 ]
 000004E4	 00000010	MOV R0 lower 16-bits base(0), next at  000004C4
 000004E8	 00000000	MOVT R0 higher 16-bits var + 0
 000004EC	     6800	LDR R0 [ R0 + 0 ]
 000004EE	     2800	CMP R0 #0
 000004F0	     BF08	IT EQ
 000004F2	 EC044114	TrapEQ 4 at pos 8721
 000004F6	     6800	LDR R0 [ R0 + 0 ]
 000004F8	     2800	CMP R0 #0
 000004FA	 F04080E4	BNE #456, goes to  000006C6
 000004FE	 F2464000	MOV R0 #25600
 00000502	 F2C40002	MOVT R0 #16386
 00000506	     6800	LDR R0 [ R0 + 0 ]
 00000508	     9005	STR R0 [ SP + 20 ]
 0000050A	 F6424034	MOV R0 #11316
 0000050E	 F2C40001	MOVT R0 #16385
 00000512	     6800	LDR R0 [ R0 + 0 ]
 00000514	     9006	STR R0 [ SP + 24 ]
 00000516	     9805	LDR R0 [ SP + 20 ]
 00000518	 EA5F60B0	RORS R0 R0 #26
 0000051C	 F1008017	BMI #46, goes to  0000054E
 00000520	     9806	LDR R0 [ SP + 24 ]
 00000522	 F240312A	MOV R1 #810
 00000526	 EA100001	ANDS R0 R0 R1 LSL #0
 0000052A	 F0408010	BNE #32, goes to  0000054E
 0000052E	     2064	MOVS R0 #100
 00000530	 10200298	BL Mod(  1) proc(2)
 00000534	 F2464000	MOV R0 #25600
 00000538	 F2C40002	MOVT R0 #16386
 0000053C	     6800	LDR R0 [ R0 + 0 ]
 0000053E	     9005	STR R0 [ SP + 20 ]
 00000540	 F6424034	MOV R0 #11316
 00000544	 F2C40001	MOVT R0 #16385
 00000548	     6800	LDR R0 [ R0 + 0 ]
 0000054A	     9006	STR R0 [ SP + 24 ]
 0000054C	     E7E3	B #-58, goes to  00000516
 0000054E	 00000035	MOV R0 lower 16-bits base(0), next at  000004E4
 00000552	 00000000	MOVT R0 higher 16-bits var + 0
 00000556	     6800	LDR R0 [ R0 + 0 ]
 00000558	     2800	CMP R0 #0
 0000055A	     BF08	IT EQ
 0000055C	 EC0471E4	TrapEQ 4 at pos 9118
 00000560	     B401	PUSH R0
 00000562	 F7FFFE95	BL #-726, goes to  00000290
 00000566	     4601	MOV R1 R0
 00000568	     BC01	POP R0
 0000056A	     6001	STR R1 [  R0 + 0 ]
 0000056C	     9806	LDR R0 [ SP + 24 ]
 0000056E	 EA5F2070	RORS R0 R0 #9
 00000572	 F10080A8	BMI #336, goes to  000006C6
 00000576	 F6483000	MOV R0 #35584
 0000057A	 F2C4204C	MOVT R0 #16972
 0000057E	     2100	MOVS R1 #0
 00000580	     6001	STR R1 [  R0 + 0 ]
 00000582	     9805	LDR R0 [ SP + 20 ]
 00000584	 EA5F60B0	RORS R0 R0 #26
 00000588	 F1408016	BPL #44, goes to  000005B8
 0000058C	 0000001F	MOV R0 lower 16-bits base(0), next at  0000054E
 00000590	 00000000	MOVT R0 higher 16-bits var + 0
 00000594	     6800	LDR R0 [ R0 + 0 ]
 00000596	     2800	CMP R0 #0
 00000598	     BF08	IT EQ
 0000059A	 EC048504	TrapEQ 4 at pos 9296
 0000059E	 10000009	MOV R1 lower 16-bits base(0), next at  0000058C
 000005A2	 00000000	MOVT R1 higher 16-bits var + 0
 000005A6	     6809	LDR R1 [ R1 + 0 ]
 000005A8	     2900	CMP R1 #0
 000005AA	     BF08	IT EQ
 000005AC	 EC048614	TrapEQ 4 at pos 9313
 000005B0	     6809	LDR R1 [ R1 + 0 ]
 000005B2	 F0514180	ORRS R1 R1 #1073741824
 000005B6	     6001	STR R1 [  R0 + 0 ]
 000005B8	     9806	LDR R0 [ SP + 24 ]
 000005BA	 EA5F00B0	RORS R0 R0 #2
 000005BE	 F1408016	BPL #44, goes to  000005EE
 000005C2	 00000012	MOV R0 lower 16-bits base(0), next at  0000059E
 000005C6	 00000000	MOVT R0 higher 16-bits var + 0
 000005CA	     6800	LDR R0 [ R0 + 0 ]
 000005CC	     2800	CMP R0 #0
 000005CE	     BF08	IT EQ
 000005D0	 EC049264	TrapEQ 4 at pos 9382
 000005D4	 10000009	MOV R1 lower 16-bits base(0), next at  000005C2
 000005D8	 00000000	MOVT R1 higher 16-bits var + 0
 000005DC	     6809	LDR R1 [ R1 + 0 ]
 000005DE	     2900	CMP R1 #0
 000005E0	     BF08	IT EQ
 000005E2	 EC049374	TrapEQ 4 at pos 9399
 000005E6	     6809	LDR R1 [ R1 + 0 ]
 000005E8	 F0510102	ORRS R1 R1 #2
 000005EC	     6001	STR R1 [  R0 + 0 ]
 000005EE	     9806	LDR R0 [ SP + 24 ]
 000005F0	 EA5F1030	RORS R0 R0 #4
 000005F4	 F1408016	BPL #44, goes to  00000624
 000005F8	 00000012	MOV R0 lower 16-bits base(0), next at  000005D4
 000005FC	 00000000	MOVT R0 higher 16-bits var + 0
 00000600	     6800	LDR R0 [ R0 + 0 ]
 00000602	     2800	CMP R0 #0
 00000604	     BF08	IT EQ
 00000606	 EC04A004	TrapEQ 4 at pos 9472
 0000060A	 10000009	MOV R1 lower 16-bits base(0), next at  000005F8
 0000060E	 00000000	MOVT R1 higher 16-bits var + 0
 00000612	     6809	LDR R1 [ R1 + 0 ]
 00000614	     2900	CMP R1 #0
 00000616	     BF08	IT EQ
 00000618	 EC04A114	TrapEQ 4 at pos 9489
 0000061C	     6809	LDR R1 [ R1 + 0 ]
 0000061E	 F0510108	ORRS R1 R1 #8
 00000622	     6001	STR R1 [  R0 + 0 ]
 00000624	     9806	LDR R0 [ SP + 24 ]
 00000626	 EA5F10B0	RORS R0 R0 #6
 0000062A	 F1408016	BPL #44, goes to  0000065A
 0000062E	 00000012	MOV R0 lower 16-bits base(0), next at  0000060A
 00000632	 00000000	MOVT R0 higher 16-bits var + 0
 00000636	     6800	LDR R0 [ R0 + 0 ]
 00000638	     2800	CMP R0 #0
 0000063A	     BF08	IT EQ
 0000063C	 EC04A584	TrapEQ 4 at pos 9560
 00000640	 10000009	MOV R1 lower 16-bits base(0), next at  0000062E
 00000644	 00000000	MOVT R1 higher 16-bits var + 0
 00000648	     6809	LDR R1 [ R1 + 0 ]
 0000064A	     2900	CMP R1 #0
 0000064C	     BF08	IT EQ
 0000064E	 EC04A694	TrapEQ 4 at pos 9577
 00000652	     6809	LDR R1 [ R1 + 0 ]
 00000654	 F0510120	ORRS R1 R1 #32
 00000658	     6001	STR R1 [  R0 + 0 ]
 0000065A	     9806	LDR R0 [ SP + 24 ]
 0000065C	 EA5F1070	RORS R0 R0 #5
 00000660	 F1408016	BPL #44, goes to  00000690
 00000664	 00000012	MOV R0 lower 16-bits base(0), next at  00000640
 00000668	 00000000	MOVT R0 higher 16-bits var + 0
 0000066C	     6800	LDR R0 [ R0 + 0 ]
 0000066E	     2800	CMP R0 #0
 00000670	     BF08	IT EQ
 00000672	 EC04B2F4	TrapEQ 4 at pos 9647
 00000676	 10000009	MOV R1 lower 16-bits base(0), next at  00000664
 0000067A	 00000000	MOVT R1 higher 16-bits var + 0
 0000067E	     6809	LDR R1 [ R1 + 0 ]
 00000680	     2900	CMP R1 #0
 00000682	     BF08	IT EQ
 00000684	 EC04B404	TrapEQ 4 at pos 9664
 00000688	     6809	LDR R1 [ R1 + 0 ]
 0000068A	 F0510110	ORRS R1 R1 #16
 0000068E	     6001	STR R1 [  R0 + 0 ]
 00000690	     9806	LDR R0 [ SP + 24 ]
 00000692	 EA5F20B0	RORS R0 R0 #10
 00000696	 F1408016	BPL #44, goes to  000006C6
 0000069A	 00000012	MOV R0 lower 16-bits base(0), next at  00000676
 0000069E	 00000000	MOVT R0 higher 16-bits var + 0
 000006A2	     6800	LDR R0 [ R0 + 0 ]
 000006A4	     2800	CMP R0 #0
 000006A6	     BF08	IT EQ
 000006A8	 EC04C074	TrapEQ 4 at pos 9735
 000006AC	 10000009	MOV R1 lower 16-bits base(0), next at  0000069A
 000006B0	 00000000	MOVT R1 higher 16-bits var + 0
 000006B4	     6809	LDR R1 [ R1 + 0 ]
 000006B6	     2900	CMP R1 #0
 000006B8	     BF08	IT EQ
 000006BA	 EC04C184	TrapEQ 4 at pos 9752
 000006BE	     6809	LDR R1 [ R1 + 0 ]
 000006C0	 F0510108	ORRS R1 R1 #8
 000006C4	     6001	STR R1 [  R0 + 0 ]
 000006C6	 F6483000	MOV R0 #35584
 000006CA	 F2C4204C	MOVT R0 #16972
 000006CE	     6800	LDR R0 [ R0 + 0 ]
 000006D0	     9004	STR R0 [ SP + 16 ]
 000006D2	     9804	LDR R0 [ SP + 16 ]
 000006D4	     2800	CMP R0 #0
 000006D6	     D1F6	BNE #-20, goes to  000006C6
 000006D8	 F2464008	MOV R0 #25608
 000006DC	 F2C40002	MOVT R0 #16386
 000006E0	 F05F6174	MOVS R1 #255852544
 000006E4	     6001	STR R1 [  R0 + 0 ]
 000006E6	 F6424038	MOV R0 #11320
 000006EA	 F2C40001	MOVT R0 #16385
 000006EE	 F24071FF	MOV R1 #2047
 000006F2	 F2C00140	MOVT R1 #64
 000006F6	     6001	STR R1 [  R0 + 0 ]
 000006F8	 00000026	MOV R0 lower 16-bits base(0), next at  000006AC
 000006FC	 00000000	MOVT R0 higher 16-bits var + 0
 00000700	     6800	LDR R0 [ R0 + 0 ]
 00000702	     2800	CMP R0 #0
 00000704	     BF08	IT EQ
 00000706	 EC04E7F4	TrapEQ 4 at pos 10111
 0000070A	     6800	LDR R0 [ R0 + 0 ]
 0000070C	 F85DEB04	LDR LR [ SP ] + 4
 00000710	     B006	ADD SP SP #24
 00000712	     4770	BX LR
 00000714	     B083	SUB SP SP #12
 00000716	     B407	PUSH R0 R1 R2
 00000718	     B500	PUSH LR
 0000071A	 00000011	MOV R0 lower 16-bits base(0), next at  000006F8
 0000071E	 00000000	MOVT R0 higher 16-bits var + 0
 00000722	     6800	LDR R0 [ R0 + 0 ]
 00000724	     2800	CMP R0 #0
 00000726	     BF08	IT EQ
 00000728	 EC050124	TrapEQ 4 at pos 10258
 0000072C	     2100	MOVS R1 #0
 0000072E	     6001	STR R1 [  R0 + 0 ]
 00000730	     9803	LDR R0 [ SP + 12 ]
 00000732	     2801	CMP R0 #1
 00000734	 F280800C	BGE #24, goes to  00000750
 00000738	 0000000F	MOV R0 lower 16-bits base(0), next at  0000071A
 0000073C	 00000000	MOVT R0 higher 16-bits var + 0
 00000740	     6800	LDR R0 [ R0 + 0 ]
 00000742	     2800	CMP R0 #0
 00000744	     BF08	IT EQ
 00000746	 EC050434	TrapEQ 4 at pos 10307
 0000074A	 F05F6100	MOVS R1 #134217728
 0000074E	     6001	STR R1 [  R0 + 0 ]
 00000750	     9802	LDR R0 [ SP + 8 ]
 00000752	     9903	LDR R1 [ SP + 12 ]
 00000754	     1840	ADDS R0 R0 R1
 00000756	 1000000F	MOV R1 lower 16-bits base(0), next at  00000738
 0000075A	 00000000	MOVT R1 higher 16-bits var + 0
 0000075E	     6809	LDR R1 [ R1 + 0 ]
 00000760	     2900	CMP R1 #0
 00000762	     BF08	IT EQ
 00000764	 EC051064	TrapEQ 4 at pos 10374
 00000768	     69C9	LDR R1 [ R1 + 28 ]
 0000076A	     4288	CMP R0 R1
 0000076C	 F340800C	BLE #24, goes to  00000788
 00000770	 0000000D	MOV R0 lower 16-bits base(0), next at  00000756
 00000774	 00000000	MOVT R0 higher 16-bits var + 0
 00000778	     6800	LDR R0 [ R0 + 0 ]
 0000077A	     2800	CMP R0 #0
 0000077C	     BF08	IT EQ
 0000077E	 EC051254	TrapEQ 4 at pos 10405
 00000782	 F05F7100	MOVS R1 #33554432
 00000786	     6001	STR R1 [  R0 + 0 ]
 00000788	 0000000C	MOV R0 lower 16-bits base(0), next at  00000770
 0000078C	 00000000	MOVT R0 higher 16-bits var + 0
 00000790	     6800	LDR R0 [ R0 + 0 ]
 00000792	     2800	CMP R0 #0
 00000794	     BF08	IT EQ
 00000796	 EC051534	TrapEQ 4 at pos 10451
 0000079A	     6800	LDR R0 [ R0 + 0 ]
 0000079C	     2800	CMP R0 #0
 0000079E	 F0408240	BNE #1152, goes to  00000C22
 000007A2	 F642402C	MOV R0 #11308
 000007A6	 F2C40001	MOVT R0 #16385
 000007AA	     2100	MOVS R1 #0
 000007AC	     6001	STR R1 [  R0 + 0 ]
 000007AE	 F642403C	MOV R0 #11324
 000007B2	 F2C40001	MOVT R0 #16385
 000007B6	     2100	MOVS R1 #0
 000007B8	     6001	STR R1 [  R0 + 0 ]
 000007BA	 F24640A8	MOV R0 #25768
 000007BE	 F2C40002	MOVT R0 #16386
 000007C2	 F6424180	MOV R1 #11392
 000007C6	 F2C40101	MOVT R1 #16385
 000007CA	     6001	STR R1 [  R0 + 0 ]
 000007CC	 F24640AC	MOV R0 #25772
 000007D0	 F2C40002	MOVT R0 #16386
 000007D4	     9901	LDR R1 [ SP + 4 ]
 000007D6	     6001	STR R1 [  R0 + 0 ]
 000007D8	 F246400C	MOV R0 #25612
 000007DC	 F2C40002	MOVT R0 #16386
 000007E0	 F45F1174	MOVS R1 #3997696
 000007E4	     6001	STR R1 [  R0 + 0 ]
 000007E6	 F24640A0	MOV R0 #25760
 000007EA	 F2C40002	MOVT R0 #16386
 000007EE	     6800	LDR R0 [ R0 + 0 ]
 000007F0	     9004	STR R0 [ SP + 16 ]
 000007F2	     9804	LDR R0 [ SP + 16 ]
 000007F4	 F030001E	BICS R0 R0 #30
 000007F8	 F24641A0	MOV R1 #25760
 000007FC	 F2C40102	MOVT R1 #16386
 00000800	     6008	STR R0 [  R1 + 0 ]
 00000802	 F24640B4	MOV R0 #25780
 00000806	 F2C40002	MOVT R0 #16386
 0000080A	     6800	LDR R0 [ R0 + 0 ]
 0000080C	     9004	STR R0 [ SP + 16 ]
 0000080E	     9804	LDR R0 [ SP + 16 ]
 00000810	 F0300080	BICS R0 R0 #128
 00000814	 F24641B4	MOV R1 #25780
 00000818	 F2C40102	MOVT R1 #16386
 0000081C	     6008	STR R0 [  R1 + 0 ]
 0000081E	 F2494000	MOV R0 #37888
 00000822	 F2C4204C	MOVT R0 #16972
 00000826	     2101	MOVS R1 #1
 00000828	     6001	STR R1 [  R0 + 0 ]
 0000082A	 00000051	MOV R0 lower 16-bits base(0), next at  00000788
 0000082E	 00000000	MOVT R0 higher 16-bits var + 0
 00000832	     6800	LDR R0 [ R0 + 0 ]
 00000834	     2800	CMP R0 #0
 00000836	     BF08	IT EQ
 00000838	 EC0580E4	TrapEQ 4 at pos 11278
 0000083C	     6840	LDR R0 [ R0 + 4 ]
 0000083E	     2801	CMP R0 #1
 00000840	 F0008003	BEQ #6, goes to  0000084A
 00000844	     9802	LDR R0 [ SP + 8 ]
 00000846	     0240	LSLS R0 R0 #9
 00000848	     9002	STR R0 [ SP + 8 ]
 0000084A	     9803	LDR R0 [ SP + 12 ]
 0000084C	     2801	CMP R0 #1
 0000084E	 F3408098	BLE #304, goes to  00000982
 00000852	 00000014	MOV R0 lower 16-bits base(0), next at  0000082A
 00000856	 00000000	MOVT R0 higher 16-bits var + 0
 0000085A	     6800	LDR R0 [ R0 + 0 ]
 0000085C	     2800	CMP R0 #0
 0000085E	     BF08	IT EQ
 00000860	 EC059424	TrapEQ 4 at pos 11458
 00000864	     6900	LDR R0 [ R0 + 16 ]
 00000866	     0400	LSLS R0 R0 #16
 00000868	 F6424108	MOV R1 #11272
 0000086C	 F2C40101	MOVT R1 #16385
 00000870	     6008	STR R0 [  R1 + 0 ]
 00000872	     9804	LDR R0 [ SP + 16 ]
 00000874	 F64071FF	MOV R1 #4095
 00000878	 EA300001	BICS R0 R0 R1 LSL #0
 0000087C	 F2404177	MOV R1 #1143
 00000880	 EA500001	ORRS R0 R0 R1 LSL #0
 00000884	 F642410C	MOV R1 #11276
 00000888	 F2C40101	MOVT R1 #16385
 0000088C	     6008	STR R0 [  R1 + 0 ]
 0000088E	 0000001E	MOV R0 lower 16-bits base(0), next at  00000852
 00000892	 00000000	MOVT R0 higher 16-bits var + 0
 00000896	     6800	LDR R0 [ R0 + 0 ]
 00000898	     2800	CMP R0 #0
 0000089A	     BF08	IT EQ
 0000089C	 EC05A7F4	TrapEQ 4 at pos 11647
 000008A0	     B401	PUSH R0
 000008A2	     2037	MOVS R0 #55
 000008A4	 F7FFFBAC	BL #-2216, goes to  00000000
 000008A8	     4601	MOV R1 R0
 000008AA	     BC01	POP R0
 000008AC	     6001	STR R1 [  R0 + 0 ]
 000008AE	 00000010	MOV R0 lower 16-bits base(0), next at  0000088E
 000008B2	 00000000	MOVT R0 higher 16-bits var + 0
 000008B6	     6800	LDR R0 [ R0 + 0 ]
 000008B8	     2800	CMP R0 #0
 000008BA	     BF08	IT EQ
 000008BC	 EC05B354	TrapEQ 4 at pos 11701
 000008C0	     6800	LDR R0 [ R0 + 0 ]
 000008C2	     2800	CMP R0 #0
 000008C4	 F0408024	BNE #72, goes to  00000910
 000008C8	 F6424008	MOV R0 #11272
 000008CC	 F2C40001	MOVT R0 #16385
 000008D0	     9903	LDR R1 [ SP + 12 ]
 000008D2	     6001	STR R1 [  R0 + 0 ]
 000008D4	     9804	LDR R0 [ SP + 16 ]
 000008D6	 F64071FF	MOV R1 #4095
 000008DA	 EA300001	BICS R0 R0 R1 LSL #0
 000008DE	 F2404157	MOV R1 #1111
 000008E2	 EA500001	ORRS R0 R0 R1 LSL #0
 000008E6	 F642410C	MOV R1 #11276
 000008EA	 F2C40101	MOVT R1 #16385
 000008EE	     6008	STR R0 [  R1 + 0 ]
 000008F0	 00000021	MOV R0 lower 16-bits base(0), next at  000008AE
 000008F4	 00000000	MOVT R0 higher 16-bits var + 0
 000008F8	     6800	LDR R0 [ R0 + 0 ]
 000008FA	     2800	CMP R0 #0
 000008FC	     BF08	IT EQ
 000008FE	 EC05D1E4	TrapEQ 4 at pos 11934
 00000902	     B401	PUSH R0
 00000904	     2017	MOVS R0 #23
 00000906	 F7FFFB7B	BL #-2314, goes to  00000000
 0000090A	     4601	MOV R1 R0
 0000090C	     BC01	POP R0
 0000090E	     6001	STR R1 [  R0 + 0 ]
 00000910	 00000010	MOV R0 lower 16-bits base(0), next at  000008F0
 00000914	 00000000	MOVT R0 higher 16-bits var + 0
 00000918	     6800	LDR R0 [ R0 + 0 ]
 0000091A	     2800	CMP R0 #0
 0000091C	     BF08	IT EQ
 0000091E	 EC05E324	TrapEQ 4 at pos 12082
 00000922	     6800	LDR R0 [ R0 + 0 ]
 00000924	     2800	CMP R0 #0
 00000926	 F040802A	BNE #84, goes to  0000097E
 0000092A	 F6424008	MOV R0 #11272
 0000092E	 F2C40001	MOVT R0 #16385
 00000932	     9902	LDR R1 [ SP + 8 ]
 00000934	     6001	STR R1 [  R0 + 0 ]
 00000936	 F642400C	MOV R0 #11276
 0000093A	 F2C40001	MOVT R0 #16385
 0000093E	     6800	LDR R0 [ R0 + 0 ]
 00000940	     9004	STR R0 [ SP + 16 ]
 00000942	     9804	LDR R0 [ SP + 16 ]
 00000944	 F64071FF	MOV R1 #4095
 00000948	 EA300001	BICS R0 R0 R1 LSL #0
 0000094C	 F2404159	MOV R1 #1113
 00000950	 EA500001	ORRS R0 R0 R1 LSL #0
 00000954	 F642410C	MOV R1 #11276
 00000958	 F2C40101	MOVT R1 #16385
 0000095C	     6008	STR R0 [  R1 + 0 ]
 0000095E	 00000027	MOV R0 lower 16-bits base(0), next at  00000910
 00000962	 00000000	MOVT R0 higher 16-bits var + 0
 00000966	     6800	LDR R0 [ R0 + 0 ]
 00000968	     2800	CMP R0 #0
 0000096A	     BF08	IT EQ
 0000096C	 EC05F7F4	TrapEQ 4 at pos 12287
 00000970	     B401	PUSH R0
 00000972	     2019	MOVS R0 #25
 00000974	 F7FFFB44	BL #-2424, goes to  00000000
 00000978	     4601	MOV R1 R0
 0000097A	     BC01	POP R0
 0000097C	     6001	STR R1 [  R0 + 0 ]
 0000097E	 F000B828	B #80, goes to  000009D2
 00000982	 F6424008	MOV R0 #11272
 00000986	 F2C40001	MOVT R0 #16385
 0000098A	     9902	LDR R1 [ SP + 8 ]
 0000098C	     6001	STR R1 [  R0 + 0 ]
 0000098E	 F642400C	MOV R0 #11276
 00000992	 F2C40001	MOVT R0 #16385
 00000996	     6800	LDR R0 [ R0 + 0 ]
 00000998	     9004	STR R0 [ SP + 16 ]
 0000099A	     9804	LDR R0 [ SP + 16 ]
 0000099C	 F64071FF	MOV R1 #4095
 000009A0	 EA300001	BICS R0 R0 R1 LSL #0
 000009A4	 F450608B	ORRS R0 R0 #1112
 000009A8	 F642410C	MOV R1 #11276
 000009AC	 F2C40101	MOVT R1 #16385
 000009B0	     6008	STR R0 [  R1 + 0 ]
 000009B2	 0000002A	MOV R0 lower 16-bits base(0), next at  0000095E
 000009B6	 00000000	MOVT R0 higher 16-bits var + 0
 000009BA	     6800	LDR R0 [ R0 + 0 ]
 000009BC	     2800	CMP R0 #0
 000009BE	     BF08	IT EQ
 000009C0	 EC0622F4	TrapEQ 4 at pos 12591
 000009C4	     B401	PUSH R0
 000009C6	     2018	MOVS R0 #24
 000009C8	 F7FFFB1A	BL #-2508, goes to  00000000
 000009CC	     4601	MOV R1 R0
 000009CE	     BC01	POP R0
 000009D0	     6001	STR R1 [  R0 + 0 ]
 000009D2	 00000010	MOV R0 lower 16-bits base(0), next at  000009B2
 000009D6	 00000000	MOVT R0 higher 16-bits var + 0
 000009DA	     6800	LDR R0 [ R0 + 0 ]
 000009DC	     2800	CMP R0 #0
 000009DE	     BF08	IT EQ
 000009E0	 EC0630C4	TrapEQ 4 at pos 12684
 000009E4	     6800	LDR R0 [ R0 + 0 ]
 000009E6	     2800	CMP R0 #0
 000009E8	 F0408102	BNE #516, goes to  00000BF0
 000009EC	 F6424024	MOV R0 #11300
 000009F0	 F2C40001	MOVT R0 #16385
 000009F4	 F05F31FF	MOVS R1 #-1
 000009F8	     6001	STR R1 [  R0 + 0 ]
 000009FA	     9803	LDR R0 [ SP + 12 ]
 000009FC	     0240	LSLS R0 R0 #9
 000009FE	 F6424128	MOV R1 #11304
 00000A02	 F2C40101	MOVT R1 #16385
 00000A06	     6008	STR R0 [  R1 + 0 ]
 00000A08	 F642402C	MOV R0 #11308
 00000A0C	 F2C40001	MOVT R0 #16385
 00000A10	     6800	LDR R0 [ R0 + 0 ]
 00000A12	     9004	STR R0 [ SP + 16 ]
 00000A14	     9804	LDR R0 [ SP + 16 ]
 00000A16	 F03000F7	BICS R0 R0 #247
 00000A1A	 F0500099	ORRS R0 R0 #153
 00000A1E	 F642412C	MOV R1 #11308
 00000A22	 F2C40101	MOVT R1 #16385
 00000A26	     6008	STR R0 [  R1 + 0 ]
 00000A28	 F2464004	MOV R0 #25604
 00000A2C	 F2C40002	MOVT R0 #16386
 00000A30	     6800	LDR R0 [ R0 + 0 ]
 00000A32	     9005	STR R0 [ SP + 20 ]
 00000A34	 F6424034	MOV R0 #11316
 00000A38	 F2C40001	MOVT R0 #16385
 00000A3C	     6800	LDR R0 [ R0 + 0 ]
 00000A3E	     9006	STR R0 [ SP + 24 ]
 00000A40	     9805	LDR R0 [ SP + 20 ]
 00000A42	 EA5F5030	RORS R0 R0 #20
 00000A46	 F1008017	BMI #46, goes to  00000A78
 00000A4A	     9806	LDR R0 [ SP + 24 ]
 00000A4C	 F240311A	MOV R1 #794
 00000A50	 EA100001	ANDS R0 R0 R1 LSL #0
 00000A54	 F0408010	BNE #32, goes to  00000A78
 00000A58	     2064	MOVS R0 #100
 00000A5A	 10200295	BL Mod(  1) proc(2)
 00000A5E	 F2464004	MOV R0 #25604
 00000A62	 F2C40002	MOVT R0 #16386
 00000A66	     6800	LDR R0 [ R0 + 0 ]
 00000A68	     9005	STR R0 [ SP + 20 ]
 00000A6A	 F6424034	MOV R0 #11316
 00000A6E	 F2C40001	MOVT R0 #16385
 00000A72	     6800	LDR R0 [ R0 + 0 ]
 00000A74	     9006	STR R0 [ SP + 24 ]
 00000A76	     E7E3	B #-58, goes to  00000A40
 00000A78	 00000053	MOV R0 lower 16-bits base(0), next at  000009D2
 00000A7C	 00000000	MOVT R0 higher 16-bits var + 0
 00000A80	     6800	LDR R0 [ R0 + 0 ]
 00000A82	     2800	CMP R0 #0
 00000A84	     BF08	IT EQ
 00000A86	 EC068754	TrapEQ 4 at pos 13429
 00000A8A	     B401	PUSH R0
 00000A8C	 F7FFFC00	BL #-2048, goes to  00000290
 00000A90	     4601	MOV R1 R0
 00000A92	     BC01	POP R0
 00000A94	     6001	STR R1 [  R0 + 0 ]
 00000A96	     9806	LDR R0 [ SP + 24 ]
 00000A98	 EA5F2070	RORS R0 R0 #9
 00000A9C	 F10080A8	BMI #336, goes to  00000BF0
 00000AA0	 F2494000	MOV R0 #37888
 00000AA4	 F2C4204C	MOVT R0 #16972
 00000AA8	     2100	MOVS R1 #0
 00000AAA	     6001	STR R1 [  R0 + 0 ]
 00000AAC	     9805	LDR R0 [ SP + 20 ]
 00000AAE	 EA5F5030	RORS R0 R0 #20
 00000AB2	 F1408016	BPL #44, goes to  00000AE2
 00000AB6	 0000001F	MOV R0 lower 16-bits base(0), next at  00000A78
 00000ABA	 00000000	MOVT R0 higher 16-bits var + 0
 00000ABE	     6800	LDR R0 [ R0 + 0 ]
 00000AC0	     2800	CMP R0 #0
 00000AC2	     BF08	IT EQ
 00000AC4	 EC06A274	TrapEQ 4 at pos 13607
 00000AC8	 10000009	MOV R1 lower 16-bits base(0), next at  00000AB6
 00000ACC	 00000000	MOVT R1 higher 16-bits var + 0
 00000AD0	     6809	LDR R1 [ R1 + 0 ]
 00000AD2	     2900	CMP R1 #0
 00000AD4	     BF08	IT EQ
 00000AD6	 EC06A384	TrapEQ 4 at pos 13624
 00000ADA	     6809	LDR R1 [ R1 + 0 ]
 00000ADC	 F0514180	ORRS R1 R1 #1073741824
 00000AE0	     6001	STR R1 [  R0 + 0 ]
 00000AE2	     9806	LDR R0 [ SP + 24 ]
 00000AE4	 EA5F00B0	RORS R0 R0 #2
 00000AE8	 F1408016	BPL #44, goes to  00000B18
 00000AEC	 00000012	MOV R0 lower 16-bits base(0), next at  00000AC8
 00000AF0	 00000000	MOVT R0 higher 16-bits var + 0
 00000AF4	     6800	LDR R0 [ R0 + 0 ]
 00000AF6	     2800	CMP R0 #0
 00000AF8	     BF08	IT EQ
 00000AFA	 EC06A7D4	TrapEQ 4 at pos 13693
 00000AFE	 10000009	MOV R1 lower 16-bits base(0), next at  00000AEC
 00000B02	 00000000	MOVT R1 higher 16-bits var + 0
 00000B06	     6809	LDR R1 [ R1 + 0 ]
 00000B08	     2900	CMP R1 #0
 00000B0A	     BF08	IT EQ
 00000B0C	 EC06B0E4	TrapEQ 4 at pos 13710
 00000B10	     6809	LDR R1 [ R1 + 0 ]
 00000B12	 F0510102	ORRS R1 R1 #2
 00000B16	     6001	STR R1 [  R0 + 0 ]
 00000B18	     9806	LDR R0 [ SP + 24 ]
 00000B1A	 EA5F1030	RORS R0 R0 #4
 00000B1E	 F1408016	BPL #44, goes to  00000B4E
 00000B22	 00000012	MOV R0 lower 16-bits base(0), next at  00000AFE
 00000B26	 00000000	MOVT R0 higher 16-bits var + 0
 00000B2A	     6800	LDR R0 [ R0 + 0 ]
 00000B2C	     2800	CMP R0 #0
 00000B2E	     BF08	IT EQ
 00000B30	 EC06B574	TrapEQ 4 at pos 13783
 00000B34	 10000009	MOV R1 lower 16-bits base(0), next at  00000B22
 00000B38	 00000000	MOVT R1 higher 16-bits var + 0
 00000B3C	     6809	LDR R1 [ R1 + 0 ]
 00000B3E	     2900	CMP R1 #0
 00000B40	     BF08	IT EQ
 00000B42	 EC06B684	TrapEQ 4 at pos 13800
 00000B46	     6809	LDR R1 [ R1 + 0 ]
 00000B48	 F0510108	ORRS R1 R1 #8
 00000B4C	     6001	STR R1 [  R0 + 0 ]
 00000B4E	     9806	LDR R0 [ SP + 24 ]
 00000B50	 EA5F10B0	RORS R0 R0 #6
 00000B54	 F1408016	BPL #44, goes to  00000B84
 00000B58	 00000012	MOV R0 lower 16-bits base(0), next at  00000B34
 00000B5C	 00000000	MOVT R0 higher 16-bits var + 0
 00000B60	     6800	LDR R0 [ R0 + 0 ]
 00000B62	     2800	CMP R0 #0
 00000B64	     BF08	IT EQ
 00000B66	 EC06C2F4	TrapEQ 4 at pos 13871
 00000B6A	 10000009	MOV R1 lower 16-bits base(0), next at  00000B58
 00000B6E	 00000000	MOVT R1 higher 16-bits var + 0
 00000B72	     6809	LDR R1 [ R1 + 0 ]
 00000B74	     2900	CMP R1 #0
 00000B76	     BF08	IT EQ
 00000B78	 EC06C404	TrapEQ 4 at pos 13888
 00000B7C	     6809	LDR R1 [ R1 + 0 ]
 00000B7E	 F0510120	ORRS R1 R1 #32
 00000B82	     6001	STR R1 [  R0 + 0 ]
 00000B84	     9806	LDR R0 [ SP + 24 ]
 00000B86	 EA5F1070	RORS R0 R0 #5
 00000B8A	 F1408016	BPL #44, goes to  00000BBA
 00000B8E	 00000012	MOV R0 lower 16-bits base(0), next at  00000B6A
 00000B92	 00000000	MOVT R0 higher 16-bits var + 0
 00000B96	     6800	LDR R0 [ R0 + 0 ]
 00000B98	     2800	CMP R0 #0
 00000B9A	     BF08	IT EQ
 00000B9C	 EC06D064	TrapEQ 4 at pos 13958
 00000BA0	 10000009	MOV R1 lower 16-bits base(0), next at  00000B8E
 00000BA4	 00000000	MOVT R1 higher 16-bits var + 0
 00000BA8	     6809	LDR R1 [ R1 + 0 ]
 00000BAA	     2900	CMP R1 #0
 00000BAC	     BF08	IT EQ
 00000BAE	 EC06D174	TrapEQ 4 at pos 13975
 00000BB2	     6809	LDR R1 [ R1 + 0 ]
 00000BB4	 F0510110	ORRS R1 R1 #16
 00000BB8	     6001	STR R1 [  R0 + 0 ]
 00000BBA	     9806	LDR R0 [ SP + 24 ]
 00000BBC	 EA5F20B0	RORS R0 R0 #10
 00000BC0	 F1408016	BPL #44, goes to  00000BF0
 00000BC4	 00000012	MOV R0 lower 16-bits base(0), next at  00000BA0
 00000BC8	 00000000	MOVT R0 higher 16-bits var + 0
 00000BCC	     6800	LDR R0 [ R0 + 0 ]
 00000BCE	     2800	CMP R0 #0
 00000BD0	     BF08	IT EQ
 00000BD2	 EC06D5E4	TrapEQ 4 at pos 14046
 00000BD6	 10000009	MOV R1 lower 16-bits base(0), next at  00000BC4
 00000BDA	 00000000	MOVT R1 higher 16-bits var + 0
 00000BDE	     6809	LDR R1 [ R1 + 0 ]
 00000BE0	     2900	CMP R1 #0
 00000BE2	     BF08	IT EQ
 00000BE4	 EC06D6F4	TrapEQ 4 at pos 14063
 00000BE8	     6809	LDR R1 [ R1 + 0 ]
 00000BEA	 F0510108	ORRS R1 R1 #8
 00000BEE	     6001	STR R1 [  R0 + 0 ]
 00000BF0	 F2494000	MOV R0 #37888
 00000BF4	 F2C4204C	MOVT R0 #16972
 00000BF8	     6800	LDR R0 [ R0 + 0 ]
 00000BFA	     9004	STR R0 [ SP + 16 ]
 00000BFC	     9804	LDR R0 [ SP + 16 ]
 00000BFE	     2800	CMP R0 #0
 00000C00	     D1F6	BNE #-20, goes to  00000BF0
 00000C02	 F246400C	MOV R0 #25612
 00000C06	 F2C40002	MOVT R0 #16386
 00000C0A	 F45F1174	MOVS R1 #3997696
 00000C0E	     6001	STR R1 [  R0 + 0 ]
 00000C10	 F6424038	MOV R0 #11320
 00000C14	 F2C40001	MOVT R0 #16385
 00000C18	 F24071FF	MOV R1 #2047
 00000C1C	 F2C00140	MOVT R1 #64
 00000C20	     6001	STR R1 [  R0 + 0 ]
 00000C22	 00000026	MOV R0 lower 16-bits base(0), next at  00000BD6
 00000C26	 00000000	MOVT R0 higher 16-bits var + 0
 00000C2A	     6800	LDR R0 [ R0 + 0 ]
 00000C2C	     2800	CMP R0 #0
 00000C2E	     BF08	IT EQ
 00000C30	 EC070564	TrapEQ 4 at pos 14422
 00000C34	     6800	LDR R0 [ R0 + 0 ]
 00000C36	 F85DEB04	LDR LR [ SP ] + 4
 00000C3A	     B006	ADD SP SP #24
 00000C3C	     4770	BX LR
 00000C3E	     B081	SUB SP SP #4
 00000C40	     B407	PUSH R0 R1 R2
 00000C42	     B500	PUSH LR
 00000C44	     2001	MOVS R0 #1
 00000C46	     2100	MOVS R1 #0
 00000C48	 104000F7	BL Mod(  1) proc(4)
 00000C4C	     9803	LDR R0 [ SP + 12 ]
 00000C4E	     2880	CMP R0 #128
 00000C50	 F3408006	BLE #12, goes to  00000C60
 00000C54	     2002	MOVS R0 #2
 00000C56	     2101	MOVS R1 #1
 00000C58	 10400008	BL Mod(  1) proc(4)
 00000C5C	 EC072167	Trap 7 at pos 14614
 00000C60	 0000001F	MOV R0 lower 16-bits base(0), next at  00000C22
 00000C64	 00000000	MOVT R0 higher 16-bits var + 0
 00000C68	     6800	LDR R0 [ R0 + 0 ]
 00000C6A	     2800	CMP R0 #0
 00000C6C	     BF08	IT EQ
 00000C6E	 EC072394	TrapEQ 4 at pos 14649
 00000C72	     6D00	LDR R0 [ R0 + 80 ]
 00000C74	     9901	LDR R1 [ SP + 4 ]
 00000C76	     9A03	LDR R2 [ SP + 12 ]
 00000C78	 F7FFFB2D	BL #-2470, goes to  000002D6
 00000C7C	     9004	STR R0 [ SP + 16 ]
 00000C7E	     9804	LDR R0 [ SP + 16 ]
 00000C80	     2800	CMP R0 #0
 00000C82	 F040800A	BNE #20, goes to  00000C9A
 00000C86	 F7FFFAB4	BL #-2712, goes to  000001F2
 00000C8A	     2804	CMP R0 #4
 00000C8C	 F0008005	BEQ #10, goes to  00000C9A
 00000C90	 F45F707A	MOVS R0 #1000
 00000C94	 1020001E	BL Mod(  1) proc(2)
 00000C98	     E7F5	B #-22, goes to  00000C86
 00000C9A	 0000001D	MOV R0 lower 16-bits base(0), next at  00000C60
 00000C9E	 00000000	MOVT R0 higher 16-bits var + 0
 00000CA2	     6800	LDR R0 [ R0 + 0 ]
 00000CA4	     2800	CMP R0 #0
 00000CA6	     BF08	IT EQ
 00000CA8	 EC073434	TrapEQ 4 at pos 14787
 00000CAC	     6800	LDR R0 [ R0 + 0 ]
 00000CAE	     2800	CMP R0 #0
 00000CB0	 F040801A	BNE #52, goes to  00000CE8
 00000CB4	 0000000D	MOV R0 lower 16-bits base(0), next at  00000C9A
 00000CB8	 00000000	MOVT R0 higher 16-bits var + 0
 00000CBC	     6800	LDR R0 [ R0 + 0 ]
 00000CBE	     2800	CMP R0 #0
 00000CC0	     BF08	IT EQ
 00000CC2	 EC073634	TrapEQ 4 at pos 14819
 00000CC6	     9903	LDR R1 [ SP + 12 ]
 00000CC8	     01C9	LSLS R1 R1 #7
 00000CCA	     6D00	LDR R0 [ R0 + 80 ]
 00000CCC	     9A02	LDR R2 [ SP + 8 ]
 00000CCE	     2900	CMP R1 #0
 00000CD0	     BFB8	IT LT
 00000CD2	 EC074053	TrapLT 3 at pos 14853
 00000CD6	     D005	BEQ #10, goes to  00000CE4
 00000CD8	 F8503B04	LDR R3 [ R0 ] + 4
 00000CDC	 F8423B04	STR R3 [  R2 ] + 4
 00000CE0	     1E49	SUBS R1 R1 #1
 00000CE2	     D1F9	BNE #-14, goes to  00000CD8
 00000CE4	 F000B810	B #32, goes to  00000D08
 00000CE8	 0000001A	MOV R0 lower 16-bits base(0), next at  00000CB4
 00000CEC	 00000000	MOVT R0 higher 16-bits var + 0
 00000CF0	     6800	LDR R0 [ R0 + 0 ]
 00000CF2	     2800	CMP R0 #0
 00000CF4	     BF08	IT EQ
 00000CF6	 EC074184	TrapEQ 4 at pos 14872
 00000CFA	     6C41	LDR R1 [ R0 + 68 ]
 00000CFC	     1C49	ADDS R1 R1 #1
 00000CFE	     6441	STR R1 [  R0 + 68 ]
 00000D00	     2002	MOVS R0 #2
 00000D02	     2100	MOVS R1 #0
 00000D04	 10400038	BL Mod(  1) proc(4)
 00000D08	     2000	MOVS R0 #0
 00000D0A	     2101	MOVS R1 #1
 00000D0C	 10400004	BL Mod(  1) proc(4)
 00000D10	 F85DEB04	LDR LR [ SP ] + 4
 00000D14	     B004	ADD SP SP #16
 00000D16	     4770	BX LR
 00000D18	     B082	SUB SP SP #8
 00000D1A	     B407	PUSH R0 R1 R2
 00000D1C	     B500	PUSH LR
 00000D1E	     2001	MOVS R0 #1
 00000D20	     2100	MOVS R1 #0
 00000D22	 1040000B	BL Mod(  1) proc(4)
 00000D26	     9803	LDR R0 [ SP + 12 ]
 00000D28	     2880	CMP R0 #128
 00000D2A	 F3408006	BLE #12, goes to  00000D3A
 00000D2E	     2002	MOVS R0 #2
 00000D30	     2101	MOVS R1 #1
 00000D32	 10400008	BL Mod(  1) proc(4)
 00000D36	 EC076177	Trap 7 at pos 15127
 00000D3A	 00000029	MOV R0 lower 16-bits base(0), next at  00000CE8
 00000D3E	 00000000	MOVT R0 higher 16-bits var + 0
 00000D42	     6800	LDR R0 [ R0 + 0 ]
 00000D44	     2800	CMP R0 #0
 00000D46	     BF08	IT EQ
 00000D48	 EC076354	TrapEQ 4 at pos 15157
 00000D4C	     9903	LDR R1 [ SP + 12 ]
 00000D4E	     01C9	LSLS R1 R1 #7
 00000D50	     9A02	LDR R2 [ SP + 8 ]
 00000D52	     6D00	LDR R0 [ R0 + 80 ]
 00000D54	     2900	CMP R1 #0
 00000D56	     BFB8	IT LT
 00000D58	 EC0764E3	TrapLT 3 at pos 15182
 00000D5C	     D005	BEQ #10, goes to  00000D6A
 00000D5E	 F8523B04	LDR R3 [ R2 ] + 4
 00000D62	 F8403B04	STR R3 [  R0 ] + 4
 00000D66	     1E49	SUBS R1 R1 #1
 00000D68	     D1F9	BNE #-14, goes to  00000D5E
 00000D6A	 00000018	MOV R0 lower 16-bits base(0), next at  00000D3A
 00000D6E	 00000000	MOVT R0 higher 16-bits var + 0
 00000D72	     6800	LDR R0 [ R0 + 0 ]
 00000D74	     2800	CMP R0 #0
 00000D76	     BF08	IT EQ
 00000D78	 EC076784	TrapEQ 4 at pos 15224
 00000D7C	     6D00	LDR R0 [ R0 + 80 ]
 00000D7E	     9901	LDR R1 [ SP + 4 ]
 00000D80	     9A03	LDR R2 [ SP + 12 ]
 00000D82	 F7FFFCC7	BL #-1650, goes to  00000714
 00000D86	     9004	STR R0 [ SP + 16 ]
 00000D88	     9804	LDR R0 [ SP + 16 ]
 00000D8A	     2800	CMP R0 #0
 00000D8C	 F040800A	BNE #20, goes to  00000DA4
 00000D90	 F7FFFA2F	BL #-2978, goes to  000001F2
 00000D94	     2804	CMP R0 #4
 00000D96	 F0008005	BEQ #10, goes to  00000DA4
 00000D9A	 F45F707A	MOVS R0 #1000
 00000D9E	 10200036	BL Mod(  1) proc(2)
 00000DA2	     E7F5	B #-22, goes to  00000D90
 00000DA4	 0000001D	MOV R0 lower 16-bits base(0), next at  00000D6A
 00000DA8	 00000000	MOVT R0 higher 16-bits var + 0
 00000DAC	     6800	LDR R0 [ R0 + 0 ]
 00000DAE	     2800	CMP R0 #0
 00000DB0	     BF08	IT EQ
 00000DB2	 EC0780A4	TrapEQ 4 at pos 15370
 00000DB6	     6800	LDR R0 [ R0 + 0 ]
 00000DB8	     2800	CMP R0 #0
 00000DBA	 F0008010	BEQ #32, goes to  00000DDE
 00000DBE	 0000000D	MOV R0 lower 16-bits base(0), next at  00000DA4
 00000DC2	 00000000	MOVT R0 higher 16-bits var + 0
 00000DC6	     6800	LDR R0 [ R0 + 0 ]
 00000DC8	     2800	CMP R0 #0
 00000DCA	     BF08	IT EQ
 00000DCC	 EC0782A4	TrapEQ 4 at pos 15402
 00000DD0	     6C81	LDR R1 [ R0 + 72 ]
 00000DD2	     1C49	ADDS R1 R1 #1
 00000DD4	     6481	STR R1 [  R0 + 72 ]
 00000DD6	     2002	MOVS R0 #2
 00000DD8	     2100	MOVS R1 #0
 00000DDA	 1040001E	BL Mod(  1) proc(4)
 00000DDE	     9805	LDR R0 [ SP + 20 ]
 00000DE0	     1E40	SUBS R0 R0 #1
 00000DE2	     9005	STR R0 [ SP + 20 ]
 00000DE4	 00000013	MOV R0 lower 16-bits base(0), next at  00000DBE
 00000DE8	 00000000	MOVT R0 higher 16-bits var + 0
 00000DEC	     6800	LDR R0 [ R0 + 0 ]
 00000DEE	     2800	CMP R0 #0
 00000DF0	     BF08	IT EQ
 00000DF2	 EC078724	TrapEQ 4 at pos 15474
 00000DF6	     6800	LDR R0 [ R0 + 0 ]
 00000DF8	     2800	CMP R0 #0
 00000DFA	 F0008003	BEQ #6, goes to  00000E04
 00000DFE	     9805	LDR R0 [ SP + 20 ]
 00000E00	     2800	CMP R0 #0
 00000E02	     D1B2	BNE #-156, goes to  00000D6A
 00000E04	 00000010	MOV R0 lower 16-bits base(0), next at  00000DE4
 00000E08	 00000000	MOVT R0 higher 16-bits var + 0
 00000E0C	     6800	LDR R0 [ R0 + 0 ]
 00000E0E	     2800	CMP R0 #0
 00000E10	     BF08	IT EQ
 00000E12	 EC079204	TrapEQ 4 at pos 15520
 00000E16	     6800	LDR R0 [ R0 + 0 ]
 00000E18	     2800	CMP R0 #0
 00000E1A	 F000800C	BEQ #24, goes to  00000E36
 00000E1E	 0000000D	MOV R0 lower 16-bits base(0), next at  00000E04
 00000E22	 00000000	MOVT R0 higher 16-bits var + 0
 00000E26	     6800	LDR R0 [ R0 + 0 ]
 00000E28	     2800	CMP R0 #0
 00000E2A	     BF08	IT EQ
 00000E2C	 EC079494	TrapEQ 4 at pos 15561
 00000E30	     6CC1	LDR R1 [ R0 + 76 ]
 00000E32	     1C49	ADDS R1 R1 #1
 00000E34	     64C1	STR R1 [  R0 + 76 ]
 00000E36	     2000	MOVS R0 #0
 00000E38	     2101	MOVS R1 #1
 00000E3A	 10400030	BL Mod(  1) proc(4)
 00000E3E	 F85DEB04	LDR LR [ SP ] + 4
 00000E42	     B005	ADD SP SP #20
 00000E44	     4770	BX LR
 00000E46	     B081	SUB SP SP #4
 00000E48	     B500	PUSH LR
 00000E4A	 F6420050	MOV R0 #10320
 00000E4E	 F2C40000	MOVT R0 #16384
 00000E52	     6800	LDR R0 [ R0 + 0 ]
 00000E54	     9001	STR R0 [ SP + 4 ]
 00000E56	     9801	LDR R0 [ SP + 4 ]
 00000E58	     1D00	ADDS R0 R0 #4
 00000E5A	     6800	LDR R0 [ R0 + 0 ]
 00000E5C	 1000001F	MOV R1 lower 16-bits base(0), next at  00000E1E
 00000E60	 00000000	MOVT R1 higher 16-bits var + 0
 00000E64	     6008	STR R0 [  R1 + 0 ]
 00000E66	 00000005	MOV R0 lower 16-bits base(0), next at  00000E5C
 00000E6A	 00000000	MOVT R0 higher 16-bits var + 0
 00000E6E	     6800	LDR R0 [ R0 + 0 ]
 00000E70	     2800	CMP R0 #0
 00000E72	     BF08	IT EQ
 00000E74	 EC07A7C4	TrapEQ 4 at pos 15740
 00000E78	     2100	MOVS R1 #0
 00000E7A	     6441	STR R1 [  R0 + 68 ]
 00000E7C	 0000000B	MOV R0 lower 16-bits base(0), next at  00000E66
 00000E80	 00000000	MOVT R0 higher 16-bits var + 0
 00000E84	     6800	LDR R0 [ R0 + 0 ]
 00000E86	     2800	CMP R0 #0
 00000E88	     BF08	IT EQ
 00000E8A	 EC07B124	TrapEQ 4 at pos 15762
 00000E8E	     2100	MOVS R1 #0
 00000E90	     6481	STR R1 [  R0 + 72 ]
 00000E92	 0000000B	MOV R0 lower 16-bits base(0), next at  00000E7C
 00000E96	 00000000	MOVT R0 higher 16-bits var + 0
 00000E9A	     6800	LDR R0 [ R0 + 0 ]
 00000E9C	     2800	CMP R0 #0
 00000E9E	     BF08	IT EQ
 00000EA0	 EC07B304	TrapEQ 4 at pos 15792
 00000EA4	     2100	MOVS R1 #0
 00000EA6	     64C1	STR R1 [  R0 + 76 ]
 00000EA8	 F85DEB04	LDR LR [ SP ] + 4
 00000EAC	     B001	ADD SP SP #4
 00000EAE	     4770	BX LR
 00000EB0	     B500	PUSH LR
 00000EB2	 F7FFFFC8	BL #-112, goes to  00000E46
 00000EB6	 F85DEB04	LDR LR [ SP ] + 4
 00000EBA	     4770	BX LR
