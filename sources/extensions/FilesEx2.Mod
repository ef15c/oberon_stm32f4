MODULE FilesEx2;
  IMPORT Files;

  PROCEDURE ReadHalfWord*(VAR R: Files.Rider; VAR n: INTEGER);
    VAR b1, b2: BYTE;
  BEGIN Files.ReadByte(R, b1); Files.ReadByte(R, b2);
    n := b1 + b2*100H
  END ReadHalfWord;

  PROCEDURE WriteHex*(VAR R: Files.Rider; x: BYTE);  (*write a byte in 2 digit hex format*)
    VAR i: INTEGER; y: INTEGER;
      a: ARRAY 2 OF CHAR;
  BEGIN i := 0;
    REPEAT y := x MOD 10H;
      IF y < 10 THEN a[i] := CHR(y + 30H) ELSE a[i] := CHR(y + 37H) END ;
      x := x DIV 10H; INC(i)
    UNTIL i = 2;
    REPEAT DEC(i); Files.Write(R, a[i]) UNTIL i = 0 ;
  END WriteHex;

  PROCEDURE WriteHexWord*(VAR R: Files.Rider; w: INTEGER);  (*write a word in 8 digit hex format*)
    VAR i: INTEGER; b: ARRAY 4 OF BYTE;
  BEGIN
    FOR i := 0 TO 3 DO b[i] := w MOD 100H; w := w DIV 100H END;
    FOR i := 3 TO 0 BY -1 DO WriteHex(R, b[i]) END
  END WriteHexWord;
  
  PROCEDURE WriteHexHalfWord*(VAR R: Files.Rider; w: INTEGER);  (*write a half word in 4 digit hex format*)
    VAR i: INTEGER; b: ARRAY 2 OF BYTE;
  BEGIN
    FOR i := 0 TO 1 DO b[i] := w MOD 100H; w := w DIV 100H END;
    FOR i := 1 TO 0 BY -1 DO WriteHex(R, b[i]) END
  END WriteHexHalfWord;
 
  PROCEDURE WriteString*(VAR R: Files.Rider; x: ARRAY OF CHAR);  (*write a string without trailing null character*)
    VAR i: INTEGER;
  BEGIN i := 0;
    WHILE x[i] # 0X DO Files.Write(R, x[i]); INC(i) END
  END WriteString;

  PROCEDURE WriteLn*(VAR R: Files.Rider);
  BEGIN Files.Write(R, 0DX)
  END WriteLn;

  PROCEDURE ReadLongInt*(VAR R: Files.Rider; VAR l: LONGINT);
    VAR x: ARRAY 8 OF BYTE; i: INTEGER;
  BEGIN FOR i := 0 TO 7 DO Files.ReadByte(R, x[i]) END;
    l := 0; FOR i:= 7 TO 0 BY -1 DO l := l*100H + x[i] END
  END ReadLongInt;

  PROCEDURE ReadLongNum*(VAR R: Files.Rider; VAR x: LONGINT);
    VAR n: INTEGER; y: LONGINT; b: BYTE;
  BEGIN n := 0; y := 0; x := 0; Files.ReadByte(R, b);
    WHILE b >= 80H DO y := b-80H; INC(x, LSL(y, n)); INC(n, 7); Files.ReadByte(R, b) END;
    y := b; INC(x, LSL(y, n)); (*store last number*);
    INC(n, 7); IF n > 64 THEN n := 64 END; x := ASR(LSL(x, 64-n), 64-n) (*sign extend the number*)
  END ReadLongNum;

  PROCEDURE WriteLongNum*(VAR R: Files.Rider; x: LONGINT);
  BEGIN
    WHILE (x < -40H) OR (x >= 40H) DO Files.WriteByte(R, x MOD 80H + 80H); x := ASR(x, 7) END ;
    Files.WriteByte(R, x MOD 80H)
  END WriteLongNum;

END FilesEx2.

OM4Tool.DecObj FilesEx2.m4c
decode FilesEx2.m4c
FilesEx2 8BA6CBB2   1   1140
imports:
	Files 1482C9F6
type descriptors

data     0
strings

code
commands:
entries
 0000041E 00000000 0000003A 000000C8 00000134 000001A0 000001F0 00000208 0000028E 000003B6
pointer refs

fixP =     1040
fixD =        0
fixT =        0
entry =     1054
 00000000	 F1BD0D04	SUBS SP SP #4
 00000004	     B407	PUSH R0 R1 R2
 00000006	     B500	PUSH LR
 00000008	     9801	LDR R0 [ SP + 4 ]
 0000000A	     9902	LDR R1 [ SP + 8 ]
 0000000C	 F11D0210	ADDS R2 SP #16
 00000010	 10E00008	BL Mod(  1) proc(14)
 00000014	     9801	LDR R0 [ SP + 4 ]
 00000016	     9902	LDR R1 [ SP + 8 ]
 00000018	 F11D0211	ADDS R2 SP #17
 0000001C	 10E00006	BL Mod(  1) proc(14)
 00000020	 F89D0011	LDRB R0 [ SP + 17 ]
 00000024	     0200	LSLS R0 R0 #8
 00000026	 F89D1010	LDRB R1 [ SP + 16 ]
 0000002A	     1808	ADDS R0 R1 R0
 0000002C	     9903	LDR R1 [ SP + 12 ]
 0000002E	     6008	STR R0 [  R1 + 0 ]
 00000030	 F85DEB04	LDR LR [ SP ] + 4
 00000034	 F11D0D10	ADDS SP SP #16
 00000038	     4770	BX LR
 0000003A	 F1BD0D0C	SUBS SP SP #12
 0000003E	     B407	PUSH R0 R1 R2
 00000040	     B500	PUSH LR
 00000042	     2000	MOVS R0 #0
 00000044	     9004	STR R0 [ SP + 16 ]
 00000046	 F89D000C	LDRB R0 [ SP + 12 ]
 0000004A	 F36F101F	BFC R0 #4 #28
 0000004E	     9005	STR R0 [ SP + 20 ]
 00000050	     9805	LDR R0 [ SP + 20 ]
 00000052	     280A	CMP R0 #10
 00000054	 F280800C	BGE #24, goes to  00000070
 00000058	     9804	LDR R0 [ SP + 16 ]
 0000005A	     2802	CMP R0 #2
 0000005C	     BF28	IT CS
 0000005E	 EC003321	TrapCS 1 at pos 434
 00000062	 EB1D0000	ADDS R0 SP R0 LSL #0
 00000066	     9905	LDR R1 [ SP + 20 ]
 00000068	     3130	ADDS R1 R1 #48
 0000006A	     7601	STRB R1 [ R0 + 24 ]
 0000006C	 F000B80A	B #20, goes to  00000084
 00000070	     9804	LDR R0 [ SP + 16 ]
 00000072	     2802	CMP R0 #2
 00000074	     BF28	IT CS
 00000076	 EC0034C1	TrapCS 1 at pos 460
 0000007A	 EB1D0000	ADDS R0 SP R0 LSL #0
 0000007E	     9905	LDR R1 [ SP + 20 ]
 00000080	     3137	ADDS R1 R1 #55
 00000082	     7601	STRB R1 [ R0 + 24 ]
 00000084	 F89D000C	LDRB R0 [ SP + 12 ]
 00000088	     1100	ASRS R0 R0 #4
 0000008A	 F88D000C	STRB R0 [  SP + 12 ]
 0000008E	     9804	LDR R0 [ SP + 16 ]
 00000090	     1C40	ADDS R0 R0 #1
 00000092	     9004	STR R0 [ SP + 16 ]
 00000094	     9804	LDR R0 [ SP + 16 ]
 00000096	     2802	CMP R0 #2
 00000098	     D1D5	BNE #-86, goes to  00000046
 0000009A	     9804	LDR R0 [ SP + 16 ]
 0000009C	     1E40	SUBS R0 R0 #1
 0000009E	     9004	STR R0 [ SP + 16 ]
 000000A0	     9801	LDR R0 [ SP + 4 ]
 000000A2	     9902	LDR R1 [ SP + 8 ]
 000000A4	     9A04	LDR R2 [ SP + 16 ]
 000000A6	     2A02	CMP R2 #2
 000000A8	     BF28	IT CS
 000000AA	 EC004371	TrapCS 1 at pos 567
 000000AE	 EB1D0202	ADDS R2 SP R2 LSL #0
 000000B2	     7E12	LDRB R2 [ R2 + 24 ]
 000000B4	 1180004C	BL Mod(  1) proc(24)
 000000B8	     9804	LDR R0 [ SP + 16 ]
 000000BA	     2800	CMP R0 #0
 000000BC	     D1ED	BNE #-38, goes to  0000009A
 000000BE	 F85DEB04	LDR LR [ SP ] + 4
 000000C2	 F11D0D18	ADDS SP SP #24
 000000C6	     4770	BX LR
 000000C8	 F1BD0D08	SUBS SP SP #8
 000000CC	     B407	PUSH R0 R1 R2
 000000CE	     B500	PUSH LR
 000000D0	     2000	MOVS R0 #0
 000000D2	     2103	MOVS R1 #3
 000000D4	     4288	CMP R0 R1
 000000D6	 F3008012	BGT #36, goes to  000000FE
 000000DA	     9004	STR R0 [ SP + 16 ]
 000000DC	     9804	LDR R0 [ SP + 16 ]
 000000DE	     2804	CMP R0 #4
 000000E0	     BF28	IT CS
 000000E2	 EC006061	TrapCS 1 at pos 774
 000000E6	 EB1D0000	ADDS R0 SP R0 LSL #0
 000000EA	     9903	LDR R1 [ SP + 12 ]
 000000EC	 F36F211F	BFC R1 #8 #24
 000000F0	     7501	STRB R1 [ R0 + 20 ]
 000000F2	     9803	LDR R0 [ SP + 12 ]
 000000F4	     1200	ASRS R0 R0 #8
 000000F6	     9003	STR R0 [ SP + 12 ]
 000000F8	     9804	LDR R0 [ SP + 16 ]
 000000FA	     1C40	ADDS R0 R0 #1
 000000FC	     E7E9	B #-46, goes to  000000D2
 000000FE	     2003	MOVS R0 #3
 00000100	     2100	MOVS R1 #0
 00000102	     4288	CMP R0 R1
 00000104	 F2C08011	BLT #34, goes to  0000012A
 00000108	     9004	STR R0 [ SP + 16 ]
 0000010A	     9801	LDR R0 [ SP + 4 ]
 0000010C	     9902	LDR R1 [ SP + 8 ]
 0000010E	     9A04	LDR R2 [ SP + 16 ]
 00000110	     2A04	CMP R2 #4
 00000112	     BF28	IT CS
 00000114	 EC006581	TrapCS 1 at pos 856
 00000118	 EB1D0202	ADDS R2 SP R2 LSL #0
 0000011C	     7D12	LDRB R2 [ R2 + 20 ]
 0000011E	 F7FFFF8C	BL #-232, goes to  0000003A
 00000122	     9804	LDR R0 [ SP + 16 ]
 00000124	 F11030FF	ADDS R0 R0 #-1
 00000128	     E7EA	B #-44, goes to  00000100
 0000012A	 F85DEB04	LDR LR [ SP ] + 4
 0000012E	 F11D0D14	ADDS SP SP #20
 00000132	     4770	BX LR
 00000134	 F1BD0D08	SUBS SP SP #8
 00000138	     B407	PUSH R0 R1 R2
 0000013A	     B500	PUSH LR
 0000013C	     2000	MOVS R0 #0
 0000013E	     2101	MOVS R1 #1
 00000140	     4288	CMP R0 R1
 00000142	 F3008012	BGT #36, goes to  0000016A
 00000146	     9004	STR R0 [ SP + 16 ]
 00000148	     9804	LDR R0 [ SP + 16 ]
 0000014A	     2802	CMP R0 #2
 0000014C	     BF28	IT CS
 0000014E	 EC0082C1	TrapCS 1 at pos 1068
 00000152	 EB1D0000	ADDS R0 SP R0 LSL #0
 00000156	     9903	LDR R1 [ SP + 12 ]
 00000158	 F36F211F	BFC R1 #8 #24
 0000015C	     7501	STRB R1 [ R0 + 20 ]
 0000015E	     9803	LDR R0 [ SP + 12 ]
 00000160	     1200	ASRS R0 R0 #8
 00000162	     9003	STR R0 [ SP + 12 ]
 00000164	     9804	LDR R0 [ SP + 16 ]
 00000166	     1C40	ADDS R0 R0 #1
 00000168	     E7E9	B #-46, goes to  0000013E
 0000016A	     2001	MOVS R0 #1
 0000016C	     2100	MOVS R1 #0
 0000016E	     4288	CMP R0 R1
 00000170	 F2C08011	BLT #34, goes to  00000196
 00000174	     9004	STR R0 [ SP + 16 ]
 00000176	     9801	LDR R0 [ SP + 4 ]
 00000178	     9902	LDR R1 [ SP + 8 ]
 0000017A	     9A04	LDR R2 [ SP + 16 ]
 0000017C	     2A02	CMP R2 #2
 0000017E	     BF28	IT CS
 00000180	 EC0087E1	TrapCS 1 at pos 1150
 00000184	 EB1D0202	ADDS R2 SP R2 LSL #0
 00000188	     7D12	LDRB R2 [ R2 + 20 ]
 0000018A	 F7FFFF56	BL #-340, goes to  0000003A
 0000018E	     9804	LDR R0 [ SP + 16 ]
 00000190	 F11030FF	ADDS R0 R0 #-1
 00000194	     E7EA	B #-44, goes to  0000016C
 00000196	 F85DEB04	LDR LR [ SP ] + 4
 0000019A	 F11D0D14	ADDS SP SP #20
 0000019E	     4770	BX LR
 000001A0	 F1BD0D04	SUBS SP SP #4
 000001A4	     B40F	PUSH R0 R1 R2 R3
 000001A6	     B500	PUSH LR
 000001A8	     2000	MOVS R0 #0
 000001AA	     9005	STR R0 [ SP + 20 ]
 000001AC	     9805	LDR R0 [ SP + 20 ]
 000001AE	     9904	LDR R1 [ SP + 16 ]
 000001B0	     4288	CMP R0 R1
 000001B2	     BF28	IT CS
 000001B4	 EC00A441	TrapCS 1 at pos 1348
 000001B8	     9903	LDR R1 [ SP + 12 ]
 000001BA	     1808	ADDS R0 R1 R0
 000001BC	     7800	LDRB R0 [ R0 + 0 ]
 000001BE	     2800	CMP R0 #0
 000001C0	 F0008011	BEQ #34, goes to  000001E6
 000001C4	     9801	LDR R0 [ SP + 4 ]
 000001C6	     9902	LDR R1 [ SP + 8 ]
 000001C8	     9A05	LDR R2 [ SP + 20 ]
 000001CA	     9B04	LDR R3 [ SP + 16 ]
 000001CC	     429A	CMP R2 R3
 000001CE	     BF28	IT CS
 000001D0	 EC00A601	TrapCS 1 at pos 1376
 000001D4	     9B03	LDR R3 [ SP + 12 ]
 000001D6	     189A	ADDS R2 R3 R2
 000001D8	     7812	LDRB R2 [ R2 + 0 ]
 000001DA	 11800093	BL Mod(  1) proc(24)
 000001DE	     9805	LDR R0 [ SP + 20 ]
 000001E0	     1C40	ADDS R0 R0 #1
 000001E2	     9005	STR R0 [ SP + 20 ]
 000001E4	     E7E2	B #-60, goes to  000001AC
 000001E6	 F85DEB04	LDR LR [ SP ] + 4
 000001EA	 F11D0D14	ADDS SP SP #20
 000001EE	     4770	BX LR
 000001F0	     B403	PUSH R0 R1
 000001F2	     B500	PUSH LR
 000001F4	     9801	LDR R0 [ SP + 4 ]
 000001F6	     9902	LDR R1 [ SP + 8 ]
 000001F8	     220D	MOVS R2 #13
 000001FA	 11800010	BL Mod(  1) proc(24)
 000001FE	 F85DEB04	LDR LR [ SP ] + 4
 00000202	 F11D0D08	ADDS SP SP #8
 00000206	     4770	BX LR
 00000208	 F1BD0D0C	SUBS SP SP #12
 0000020C	     B407	PUSH R0 R1 R2
 0000020E	     B500	PUSH LR
 00000210	     2000	MOVS R0 #0
 00000212	     2107	MOVS R1 #7
 00000214	     4288	CMP R0 R1
 00000216	 F3008010	BGT #32, goes to  0000023A
 0000021A	     9006	STR R0 [ SP + 24 ]
 0000021C	     9801	LDR R0 [ SP + 4 ]
 0000021E	     9902	LDR R1 [ SP + 8 ]
 00000220	     9A06	LDR R2 [ SP + 24 ]
 00000222	     2A08	CMP R2 #8
 00000224	     BF28	IT CS
 00000226	 EC00C6F1	TrapCS 1 at pos 1647
 0000022A	 EB1D0202	ADDS R2 SP R2 LSL #0
 0000022E	     3210	ADDS R2 R2 #16
 00000230	 10E0001B	BL Mod(  1) proc(14)
 00000234	     9806	LDR R0 [ SP + 24 ]
 00000236	     1C40	ADDS R0 R0 #1
 00000238	     E7EB	B #-42, goes to  00000212
 0000023A	     2000	MOVS R0 #0
 0000023C	     2100	MOVS R1 #0
 0000023E	     9A03	LDR R2 [ SP + 12 ]
 00000240	 E9C20100	STRD R0 R1 [ R2 + 0 ]
 00000244	     2007	MOVS R0 #7
 00000246	     2100	MOVS R1 #0
 00000248	     4288	CMP R0 R1
 0000024A	 F2C0801B	BLT #54, goes to  00000284
 0000024E	     9006	STR R0 [ SP + 24 ]
 00000250	     9803	LDR R0 [ SP + 12 ]
 00000252	 E9D00100	LDRD R0 R1 [ R0 + 0 ]
 00000256	     0209	LSLS R1 R1 #8
 00000258	 EA516110	ORRS R1 R1 R0 LSR #24
 0000025C	     0200	LSLS R0 R0 #8
 0000025E	     9A06	LDR R2 [ SP + 24 ]
 00000260	     2A08	CMP R2 #8
 00000262	     BF28	IT CS
 00000264	 EC00D2C1	TrapCS 1 at pos 1708
 00000268	 EB1D0202	ADDS R2 SP R2 LSL #0
 0000026C	     7C12	LDRB R2 [ R2 + 16 ]
 0000026E	 F34273C0	SBFX R3 R2 #31 #1
 00000272	     1880	ADDS R0 R0 R2
 00000274	     4159	ADCS R1 R1 R3
 00000276	     9A03	LDR R2 [ SP + 12 ]
 00000278	 E9C20100	STRD R0 R1 [ R2 + 0 ]
 0000027C	     9806	LDR R0 [ SP + 24 ]
 0000027E	 F11030FF	ADDS R0 R0 #-1
 00000282	     E7E0	B #-64, goes to  00000246
 00000284	 F85DEB04	LDR LR [ SP ] + 4
 00000288	 F11D0D18	ADDS SP SP #24
 0000028C	     4770	BX LR
 0000028E	 F1BD0D10	SUBS SP SP #16
 00000292	     B407	PUSH R0 R1 R2
 00000294	     B500	PUSH LR
 00000296	     2000	MOVS R0 #0
 00000298	     9004	STR R0 [ SP + 16 ]
 0000029A	     2000	MOVS R0 #0
 0000029C	     2100	MOVS R1 #0
 0000029E	 E9CD0105	STRD R0 R1 [ SP + 20 ]
 000002A2	     2000	MOVS R0 #0
 000002A4	     2100	MOVS R1 #0
 000002A6	     9A03	LDR R2 [ SP + 12 ]
 000002A8	 E9C20100	STRD R0 R1 [ R2 + 0 ]
 000002AC	     9801	LDR R0 [ SP + 4 ]
 000002AE	     9902	LDR R1 [ SP + 8 ]
 000002B0	 F11D021C	ADDS R2 SP #28
 000002B4	 10E00042	BL Mod(  1) proc(14)
 000002B8	 F89D001C	LDRB R0 [ SP + 28 ]
 000002BC	     2880	CMP R0 #128
 000002BE	 F2C08027	BLT #78, goes to  00000310
 000002C2	 F89D001C	LDRB R0 [ SP + 28 ]
 000002C6	     3880	SUBS R0 R0 #128
 000002C8	 F34071C0	SBFX R1 R0 #31 #1
 000002CC	 E9CD0105	STRD R0 R1 [ SP + 20 ]
 000002D0	 E9DD0105	LDRD R0 R1 [ SP + 20 ]
 000002D4	     9A04	LDR R2 [ SP + 16 ]
 000002D6	 F1B20420	SUBS R4 R2 #32
 000002DA	 FA10F404	LSLS R4 R0 R4
 000002DE	 F1D20320	RSBS R3 R2 #32
 000002E2	     4091	LSLS R1 R1 R2
 000002E4	 FA30F303	LSRS R3 R0 R3
 000002E8	     4321	ORRS R1 R1 R4
 000002EA	     4090	LSLS R0 R0 R2
 000002EC	     4319	ORRS R1 R1 R3
 000002EE	     9A03	LDR R2 [ SP + 12 ]
 000002F0	 E9D23400	LDRD R3 R4 [ R2 + 0 ]
 000002F4	     181B	ADDS R3 R3 R0
 000002F6	     414C	ADCS R4 R4 R1
 000002F8	 E9C23400	STRD R3 R4 [ R2 + 0 ]
 000002FC	     9804	LDR R0 [ SP + 16 ]
 000002FE	     1DC0	ADDS R0 R0 #7
 00000300	     9004	STR R0 [ SP + 16 ]
 00000302	     9801	LDR R0 [ SP + 4 ]
 00000304	     9902	LDR R1 [ SP + 8 ]
 00000306	 F11D021C	ADDS R2 SP #28
 0000030A	 10E0002B	BL Mod(  1) proc(14)
 0000030E	     E7D3	B #-90, goes to  000002B8
 00000310	 F89D001C	LDRB R0 [ SP + 28 ]
 00000314	 F34071C0	SBFX R1 R0 #31 #1
 00000318	 E9CD0105	STRD R0 R1 [ SP + 20 ]
 0000031C	 E9DD0105	LDRD R0 R1 [ SP + 20 ]
 00000320	     9A04	LDR R2 [ SP + 16 ]
 00000322	 F1B20420	SUBS R4 R2 #32
 00000326	 FA10F404	LSLS R4 R0 R4
 0000032A	 F1D20320	RSBS R3 R2 #32
 0000032E	     4091	LSLS R1 R1 R2
 00000330	 FA30F303	LSRS R3 R0 R3
 00000334	     4321	ORRS R1 R1 R4
 00000336	     4090	LSLS R0 R0 R2
 00000338	     4319	ORRS R1 R1 R3
 0000033A	     9A03	LDR R2 [ SP + 12 ]
 0000033C	 E9D23400	LDRD R3 R4 [ R2 + 0 ]
 00000340	     181B	ADDS R3 R3 R0
 00000342	     414C	ADCS R4 R4 R1
 00000344	 E9C23400	STRD R3 R4 [ R2 + 0 ]
 00000348	     9804	LDR R0 [ SP + 16 ]
 0000034A	     1DC0	ADDS R0 R0 #7
 0000034C	     9004	STR R0 [ SP + 16 ]
 0000034E	     9804	LDR R0 [ SP + 16 ]
 00000350	     2840	CMP R0 #64
 00000352	 F3408002	BLE #4, goes to  0000035A
 00000356	     2040	MOVS R0 #64
 00000358	     9004	STR R0 [ SP + 16 ]
 0000035A	     2040	MOVS R0 #64
 0000035C	     9904	LDR R1 [ SP + 16 ]
 0000035E	     1A40	SUBS R0 R0 R1
 00000360	     4602	MOV R2 R0
 00000362	     9803	LDR R0 [ SP + 12 ]
 00000364	 E9D00100	LDRD R0 R1 [ R0 + 0 ]
 00000368	 F1B20420	SUBS R4 R2 #32
 0000036C	 FA10F404	LSLS R4 R0 R4
 00000370	 F1D20320	RSBS R3 R2 #32
 00000374	     4091	LSLS R1 R1 R2
 00000376	 FA30F303	LSRS R3 R0 R3
 0000037A	     4321	ORRS R1 R1 R4
 0000037C	     4090	LSLS R0 R0 R2
 0000037E	     4319	ORRS R1 R1 R3
 00000380	     2240	MOVS R2 #64
 00000382	     9B04	LDR R3 [ SP + 16 ]
 00000384	     1AD2	SUBS R2 R2 R3
 00000386	 F1D20420	RSBS R4 R2 #32
 0000038A	 FA11F404	LSLS R4 R1 R4
 0000038E	 F1B20320	SUBS R3 R2 #32
 00000392	 FA20F002	LSR R0 R0 R2
 00000396	     BF58	IT PL
 00000398	 FA41F303	ASRPL R3 R1 R3
 0000039C	 EA400004	ORR R0 R0 R4 LSL #0
 000003A0	     BF58	IT PL
 000003A2	     4318	ORRPL R0 R0 R3
 000003A4	     4111	ASRS R1 R1 R2
 000003A6	     9A03	LDR R2 [ SP + 12 ]
 000003A8	 E9C20100	STRD R0 R1 [ R2 + 0 ]
 000003AC	 F85DEB04	LDR LR [ SP ] + 4
 000003B0	 F11D0D1C	ADDS SP SP #28
 000003B4	     4770	BX LR
 000003B6	     B40F	PUSH R0 R1 R2 R3
 000003B8	     B500	PUSH LR
 000003BA	 E9DD0103	LDRD R0 R1 [ SP + 12 ]
 000003BE	 F1100F40	CMN R0 #64
 000003C2	 F17131FF	SBCS R1 R1 #-1
 000003C6	 F2C08007	BLT #14, goes to  000003D8
 000003CA	 E9DD0103	LDRD R0 R1 [ SP + 12 ]
 000003CE	     2840	CMP R0 #64
 000003D0	 F1710100	SBCS R1 R1 #0
 000003D4	 F2C08015	BLT #42, goes to  00000402
 000003D8	     9801	LDR R0 [ SP + 4 ]
 000003DA	     9902	LDR R1 [ SP + 8 ]
 000003DC	 E9DD2303	LDRD R2 R3 [ SP + 12 ]
 000003E0	     2300	MOVS R3 #0
 000003E2	 F36F12DF	BFC R2 #7 #25
 000003E6	     3280	ADDS R2 R2 #128
 000003E8	 F1530300	ADCS R3 R3 #0
 000003EC	 11600071	BL Mod(  1) proc(22)
 000003F0	 E9DD0103	LDRD R0 R1 [ SP + 12 ]
 000003F4	     09C0	LSRS R0 R0 #7
 000003F6	 EA506041	ORRS R0 R0 R1 LSL #25
 000003FA	     11C9	ASRS R1 R1 #7
 000003FC	 E9CD0103	STRD R0 R1 [ SP + 12 ]
 00000400	     E7DB	B #-74, goes to  000003BA
 00000402	     9801	LDR R0 [ SP + 4 ]
 00000404	     9902	LDR R1 [ SP + 8 ]
 00000406	 E9DD2303	LDRD R2 R3 [ SP + 12 ]
 0000040A	     2300	MOVS R3 #0
 0000040C	 F36F12DF	BFC R2 #7 #25
 00000410	 11600012	BL Mod(  1) proc(22)
 00000414	 F85DEB04	LDR LR [ SP ] + 4
 00000418	 F11D0D10	ADDS SP SP #16
 0000041C	     4770	BX LR
 0000041E	     B500	PUSH LR
 00000420	 F85DEB04	LDR LR [ SP ] + 4
 00000424	     4770	BX LR
