MODULE testLongInt;

  TYPE R = RECORD l: LONGINT; i: INTEGER; al: ARRAY 5 OF LONGINT END;
    PR = POINTER TO R;

  VAR s: LONGINT; ac: ARRAY 5 OF CHAR;

  PROCEDURE p(i: INTEGER; c: CHAR);
  BEGIN END p;

  PROCEDURE run*(VAR x: LONGINT; c: ARRAY OF CHAR);
    VAR pr!: PR; r: R;n: INTEGER; a: ARRAY 5 OF LONGINT;
      b: ARRAY 5 OF INTEGER; y: LONGINT;
  BEGIN pr.al[0] := y; p(n, c[n]); pr.l := 0; a[0] := y; INC(s, x); INC(x, LSL(y, n)); INC(pr.l, n); INC(pr.i, n)
  END run;

BEGIN run(s, ac)
END testLongInt.

System.Free OM4P2 OM4G2 OM4A2 OM4B2 OM4S2 ~ System.Free OM4Tool OM4D ~
OM4P2.Compile testLongInt.Mod/s ~ System.Free testLongInt ~ testLongInt.run testLongInt.trap testLongInt.run2

OM4Tool.DecObj testLongInt.m4c
decode testLongInt.m4c
testLongInt 8A68BCDB   1    296
imports:
type descriptors
 00000040 FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
data    16
strings

code
commands:
entries
 000000D4 0000000C
pointer refs

fixP =        0
fixD =      222
fixT =        0
entry =      212
 00000000	     B403	PUSH R0 R1
 00000002	     B500	PUSH LR
 00000004	 F85DEB04	LDR LR [ SP ] + 4
 00000008	     B002	ADD SP SP #8
 0000000A	     4770	BX LR
 0000000C	     B0A0	SUB SP SP #128
 0000000E	     B407	PUSH R0 R1 R2
 00000010	     B500	PUSH LR
 00000012	     9804	LDR R0 [ SP + 16 ]
 00000014	     2800	CMP R0 #0
 00000016	     BF08	IT EQ
 00000018	 EC002724	TrapEQ 4 at pos 370
 0000001C	 E9DD1222	LDRD R1 R2 [ SP + 136 ]
 00000020	 E9C01203	STRD R1 R2 [ R0 + 12 ]
 00000024	     9812	LDR R0 [ SP + 72 ]
 00000026	     9912	LDR R1 [ SP + 72 ]
 00000028	     9A03	LDR R2 [ SP + 12 ]
 0000002A	     4291	CMP R1 R2
 0000002C	     BF28	IT CS
 0000002E	 EC003051	TrapCS 1 at pos 389
 00000032	     9A02	LDR R2 [ SP + 8 ]
 00000034	     1851	ADDS R1 R2 R1
 00000036	     7809	LDRB R1 [ R1 + 0 ]
 00000038	 F7FFFFE2	BL #-60, goes to  00000000
 0000003C	     9804	LDR R0 [ SP + 16 ]
 0000003E	     2800	CMP R0 #0
 00000040	     BF08	IT EQ
 00000042	 EC0030C4	TrapEQ 4 at pos 396
 00000046	     2100	MOVS R1 #0
 00000048	     2200	MOVS R2 #0
 0000004A	 E9C01200	STRD R1 R2 [ R0 + 0 ]
 0000004E	 E9DD0122	LDRD R0 R1 [ SP + 136 ]
 00000052	 E9CD0113	STRD R0 R1 [ SP + 76 ]
 00000056	 0000002B	MOV R0 lower 16-bits base(0)
 0000005A	 00000014	MOVT R0 higher 16-bits base + 20
 0000005E	 E9D01200	LDRD R1 R2 [ R0 + 0 ]
 00000062	     9B01	LDR R3 [ SP + 4 ]
 00000064	 E9D33400	LDRD R3 R4 [ R3 + 0 ]
 00000068	     18C9	ADDS R1 R1 R3
 0000006A	     4162	ADCS R2 R2 R4
 0000006C	 E9C01200	STRD R1 R2 [ R0 + 0 ]
 00000070	 E9DD0122	LDRD R0 R1 [ SP + 136 ]
 00000074	     9A12	LDR R2 [ SP + 72 ]
 00000076	 F1B20420	SUBS R4 R2 #32
 0000007A	 FA10F404	LSLS R4 R0 R4
 0000007E	 F1D20320	RSBS R3 R2 #32
 00000082	     4091	LSLS R1 R1 R2
 00000084	 FA30F303	LSRS R3 R0 R3
 00000088	     4321	ORRS R1 R1 R4
 0000008A	     4090	LSLS R0 R0 R2
 0000008C	     4319	ORRS R1 R1 R3
 0000008E	     9A01	LDR R2 [ SP + 4 ]
 00000090	 E9D23400	LDRD R3 R4 [ R2 + 0 ]
 00000094	     181B	ADDS R3 R3 R0
 00000096	     414C	ADCS R4 R4 R1
 00000098	 E9C23400	STRD R3 R4 [ R2 + 0 ]
 0000009C	     9804	LDR R0 [ SP + 16 ]
 0000009E	     2800	CMP R0 #0
 000000A0	     BF08	IT EQ
 000000A2	 EC003444	TrapEQ 4 at pos 452
 000000A6	     9912	LDR R1 [ SP + 72 ]
 000000A8	 F34172C0	SBFX R2 R1 #31 #1
 000000AC	 E9D03400	LDRD R3 R4 [ R0 + 0 ]
 000000B0	     185B	ADDS R3 R3 R1
 000000B2	     4154	ADCS R4 R4 R2
 000000B4	 E9C03400	STRD R3 R4 [ R0 + 0 ]
 000000B8	     9804	LDR R0 [ SP + 16 ]
 000000BA	     2800	CMP R0 #0
 000000BC	     BF08	IT EQ
 000000BE	 EC003524	TrapEQ 4 at pos 466
 000000C2	     3008	ADDS R0 R0 #8
 000000C4	     6801	LDR R1 [ R0 + 0 ]
 000000C6	     9A12	LDR R2 [ SP + 72 ]
 000000C8	     1889	ADDS R1 R1 R2
 000000CA	     6001	STR R1 [  R0 + 0 ]
 000000CC	 F85DEB04	LDR LR [ SP ] + 4
 000000D0	     B023	ADD SP SP #140
 000000D2	     4770	BX LR
 000000D4	     B500	PUSH LR
 000000D6	 00000040	MOV R0 lower 16-bits base(0)
 000000DA	 00000014	MOVT R0 higher 16-bits base + 20
 000000DE	 20000004	MOV R2 lower 16-bits base(0)
 000000E2	 0000001C	MOVT R2 higher 16-bits base + 28
 000000E6	     2305	MOVS R3 #5
 000000E8	 F7FFFF90	BL #-224, goes to  0000000C
 000000EC	 F85DEB04	LDR LR [ SP ] + 4
 000000F0	     4770	BX LR

 0000001C	 E9C04500	STRD R4 R5 [ R0 + 0 ]
 00000020	     9801	LDR R0 [ SP + 4 ]
 00000022	     2800	CMP R0 #0
 00000024	     BF08	IT EQ
 00000026	 EC001614	TrapEQ 4 at pos 225
 0000002A	     3008	ADDS R0 R0 #8 ; Optimisation possible avec suppression de cette instruction
 0000002C	     6801	LDR R1 [ R0 + 0 ]; et remplacement de celle ci par LDR R1 [ R0 + 8 ]
 0000002E	     9A05	LDR R2 [ SP + 20 ]
 00000030	     1889	ADDS R1 R1 R2
 00000032	     6001	STR R1 [  R0 + 0 ] et celle ci par STR R1 [  R0 + 8 ]
 00000034	 F85DEB04	LDR LR [ SP ] + 4
 00000038	     B014	ADD SP SP #80
 0000003A	     4770	BX LR
 0000003C	     B500	PUSH LR
 0000003E	 F85DEB04	LDR LR [ SP ] + 4
 00000042	     4770	BX LR
