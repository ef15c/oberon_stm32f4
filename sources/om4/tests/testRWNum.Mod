MODULE testRWNum;
  IMPORT Files, FilesEx := FilesEx2, Texts, Oberon;

  VAR W: Texts.Writer;

  PROCEDURE write*;
    VAR f!: Files.File; r!: Files.Rider; v: INTEGER;
  BEGIN f := Files.New("testRWNum.data");
    Files.Set(r, f, 0);  Files.WriteNum(r, -1000); Files.WriteNum(r, -1); Files.WriteNum(r, 0); Files.WriteNum(r, 1); Files.WriteNum(r, 1000);
    Files.Register(f);

    Files.Set(r, f, 0); Files.ReadNum(r, v);
    WHILE ~r.eof DO Texts.WriteString(W, "v = "); Texts.WriteInt(W, v, 1); Texts.WriteLn(W); Files.ReadNum(r, v) END;
    Texts.Append(Oberon.Log, W.buf)    
  END write;

  PROCEDURE writeL*;
    VAR f!: Files.File; r!: Files.Rider; v: LONGINT;
  BEGIN f := Files.New("testRWNum.data");
    Files.Set(r, f, 0);  FilesEx.WriteLongNum(r, -1000); FilesEx.WriteLongNum(r, -1); FilesEx.WriteLongNum(r, 0);
    FilesEx.WriteLongNum(r, 1); FilesEx.WriteLongNum(r, 1000);
    Files.Register(f);

    Files.Set(r, f, 0); FilesEx.ReadLongNum(r, v);
    WHILE ~r.eof DO Texts.WriteString(W, "v = "); Texts.WriteInt(W, v, 1); Texts.WriteLn(W); FilesEx.ReadLongNum(r, v) END;
    Texts.Append(Oberon.Log, W.buf)    
  END writeL;

  PROCEDURE run*;
    VAR f!: Files.File; r!: Files.Rider; v: INTEGER;
  BEGIN f := Files.Old("testRWNum.data");
    Files.Set(r, f, 0); Files.ReadNum(r, v);
    WHILE ~r.eof DO Texts.WriteString(W, "v = "); Texts.WriteInt(W, v, 1); Texts.WriteLn(W); Files.ReadNum(r, v) END;
    Texts.Append(Oberon.Log, W.buf)    
  END run;

  PROCEDURE runL*;
    VAR f!: Files.File; r!: Files.Rider; v: LONGINT;
  BEGIN f := Files.Old("testRWNum.data");
    Files.Set(r, f, 0); FilesEx.ReadLongNum(r, v);
    WHILE ~r.eof DO Texts.WriteString(W, "v = "); Texts.WriteInt(W, v, 1); Texts.WriteLn(W); FilesEx.ReadLongNum(r, v) END;
    Texts.Append(Oberon.Log, W.buf)    
  END runL;

BEGIN Texts.OpenWriter(W);  
END testRWNum.

OM4P2.Compile testRWNum.Mod/s ~ System.Free testRWNum OM4P2 OM4G2 FilesEx ~ 
testRWNum.write testRWNum.writeL
testRWNum.run testRWNum.runL

OM4Tool.DecObj testRWNum.m4c
decode testRWNum.m4c
testRWNum 1E794B13   1   1448
imports:
	Files 1482C9F6
	FilesEx2 8BA6CBB2
	Texts AFCB7538
	Fonts AA480AE7
	Oberon DB3EE95B
	Display 15E666AA
	Viewers E54B088A
	PS2 FA464427
type descriptors

data    40
strings
testRWNum.data||v = ||||testRWNum.data||v = ||||testRWNum.data||v = ||||testRWNum.data||v = ||||
code
commands:
	write    0
	writeL  328
	run  656
	runL  858
entries
 00000424 00000000 00000148 00000290 0000035A
pointer refs
    36    24     4     0
fixP =     1078
fixD =     1070
fixT =        0
entry =     1060
 00000000	 F1BD0D20	SUBS SP SP #32
 00000004	     B500	PUSH LR
 00000006	 00000003	MOV R0 lower 16-bits base(0)
 0000000A	 00000028	MOVT R0 higher 16-bits base + 40
 0000000E	     210F	MOVS R1 #15
 00000010	 10300008	BL Mod(  1) proc(3)
 00000014	     9001	STR R0 [ SP + 4 ]
 00000016	 F11D0008	ADDS R0 SP #8
 0000001A	 1100000A	MOV R1 lower 16-bits base(1)
 0000001E	 00000001	MOVT R1 higher 16-bits var(1)
 00000022	     9A01	LDR R2 [ SP + 4 ]
 00000024	     2300	MOVS R3 #0
 00000026	 10B0000B	BL Mod(  1) proc(11)
 0000002A	 F11D0008	ADDS R0 SP #8
 0000002E	 1100000A	MOV R1 lower 16-bits base(1)
 00000032	 00000001	MOVT R1 higher 16-bits var(1)
 00000036	 F64F4218	MOV R2 #64536
 0000003A	 F6CF72FF	MOVT R2 #65535
 0000003E	 11D0000C	BL Mod(  1) proc(29)
 00000042	 F11D0008	ADDS R0 SP #8
 00000046	 1100000C	MOV R1 lower 16-bits base(1)
 0000004A	 00000001	MOVT R1 higher 16-bits var(1)
 0000004E	 F05F32FF	MOVS R2 #-1
 00000052	 11D0000A	BL Mod(  1) proc(29)
 00000056	 F11D0008	ADDS R0 SP #8
 0000005A	 1100000A	MOV R1 lower 16-bits base(1)
 0000005E	 00000001	MOVT R1 higher 16-bits var(1)
 00000062	     2200	MOVS R2 #0
 00000064	 11D00009	BL Mod(  1) proc(29)
 00000068	 F11D0008	ADDS R0 SP #8
 0000006C	 11000009	MOV R1 lower 16-bits base(1)
 00000070	 00000001	MOVT R1 higher 16-bits var(1)
 00000074	     2201	MOVS R2 #1
 00000076	 11D00009	BL Mod(  1) proc(29)
 0000007A	 F11D0008	ADDS R0 SP #8
 0000007E	 11000009	MOV R1 lower 16-bits base(1)
 00000082	 00000001	MOVT R1 higher 16-bits var(1)
 00000086	 F45F727A	MOVS R2 #1000
 0000008A	 11D0000A	BL Mod(  1) proc(29)
 0000008E	     9801	LDR R0 [ SP + 4 ]
 00000090	 10400003	BL Mod(  1) proc(4)
 00000094	 F11D0008	ADDS R0 SP #8
 00000098	 1100000D	MOV R1 lower 16-bits base(1)
 0000009C	 00000001	MOVT R1 higher 16-bits var(1)
 000000A0	     9A01	LDR R2 [ SP + 4 ]
 000000A2	     2300	MOVS R3 #0
 000000A4	 10B0000A	BL Mod(  1) proc(11)
 000000A8	 F11D0008	ADDS R0 SP #8
 000000AC	 1100000A	MOV R1 lower 16-bits base(1)
 000000B0	 00000001	MOVT R1 higher 16-bits var(1)
 000000B4	 F11D0220	ADDS R2 SP #32
 000000B8	 1150000A	BL Mod(  1) proc(21)
 000000BC	 F89D0008	LDRB R0 [ SP + 8 ]
 000000C0	     2800	CMP R0 #0
 000000C2	 F0408030	BNE #96, goes to  00000126
 000000C6	 0000000D	MOV R0 lower 16-bits base(0)
 000000CA	 00000000	MOVT R0 higher 16-bits base + 0
 000000CE	 13000004	MOV R1 lower 16-bits base(3)
 000000D2	 00000005	MOVT R1 higher 16-bits var(5)
 000000D6	 20000004	MOV R2 lower 16-bits base(0)
 000000DA	 00000038	MOVT R2 higher 16-bits base + 56
 000000DE	     2305	MOVS R3 #5
 000000E0	 31D00014	BL Mod(  3) proc(29)
 000000E4	 00000007	MOV R0 lower 16-bits base(0)
 000000E8	 00000000	MOVT R0 higher 16-bits base + 0
 000000EC	 13000004	MOV R1 lower 16-bits base(3)
 000000F0	 00000005	MOVT R1 higher 16-bits var(5)
 000000F4	     9A08	LDR R2 [ SP + 32 ]
 000000F6	     2301	MOVS R3 #1
 000000F8	 31E0000C	BL Mod(  3) proc(30)
 000000FC	 00000008	MOV R0 lower 16-bits base(0)
 00000100	 00000000	MOVT R0 higher 16-bits base + 0
 00000104	 13000004	MOV R1 lower 16-bits base(3)
 00000108	 00000005	MOVT R1 higher 16-bits var(5)
 0000010C	 31C0000A	BL Mod(  3) proc(28)
 00000110	 F11D0008	ADDS R0 SP #8
 00000114	 11000008	MOV R1 lower 16-bits base(1)
 00000118	 00000001	MOVT R1 higher 16-bits var(1)
 0000011C	 F11D0220	ADDS R2 SP #32
 00000120	 1150000A	BL Mod(  1) proc(21)
 00000124	     E7CA	B #-108, goes to  000000BC
 00000126	 05000009	MOV R0 lower 16-bits base(5)
 0000012A	 0000000D	MOVT R0 higher 16-bits var(13)
 0000012E	     6800	LDR R0 [ R0 + 0 ]
 00000130	 10000005	MOV R1 lower 16-bits base(0)
 00000134	 00000000	MOVT R1 higher 16-bits base + 0
 00000138	     6809	LDR R1 [ R1 + 0 ]
 0000013A	 30E0000D	BL Mod(  3) proc(14)
 0000013E	 F85DEB04	LDR LR [ SP ] + 4
 00000142	 F11D0D20	ADDS SP SP #32
 00000146	     4770	BX LR
 00000148	 F1BD0D24	SUBS SP SP #36
 0000014C	     B500	PUSH LR
 0000014E	 0000000F	MOV R0 lower 16-bits base(0)
 00000152	 00000040	MOVT R0 higher 16-bits base + 64
 00000156	     210F	MOVS R1 #15
 00000158	 1030000F	BL Mod(  1) proc(3)
 0000015C	     9001	STR R0 [ SP + 4 ]
 0000015E	 F11D0008	ADDS R0 SP #8
 00000162	 1100000A	MOV R1 lower 16-bits base(1)
 00000166	 00000001	MOVT R1 higher 16-bits var(1)
 0000016A	     9A01	LDR R2 [ SP + 4 ]
 0000016C	     2300	MOVS R3 #0
 0000016E	 10B0000B	BL Mod(  1) proc(11)
 00000172	 F11D0008	ADDS R0 SP #8
 00000176	 1100000A	MOV R1 lower 16-bits base(1)
 0000017A	 00000001	MOVT R1 higher 16-bits var(1)
 0000017E	 F64F4218	MOV R2 #64536
 00000182	 F6CF72FF	MOVT R2 #65535
 00000186	 2090000C	BL Mod(  2) proc(9)
 0000018A	 F11D0008	ADDS R0 SP #8
 0000018E	 1100000C	MOV R1 lower 16-bits base(1)
 00000192	 00000001	MOVT R1 higher 16-bits var(1)
 00000196	 F05F32FF	MOVS R2 #-1
 0000019A	 2090000A	BL Mod(  2) proc(9)
 0000019E	 F11D0008	ADDS R0 SP #8
 000001A2	 1100000A	MOV R1 lower 16-bits base(1)
 000001A6	 00000001	MOVT R1 higher 16-bits var(1)
 000001AA	     2200	MOVS R2 #0
 000001AC	 20900009	BL Mod(  2) proc(9)
 000001B0	 F11D0008	ADDS R0 SP #8
 000001B4	 11000009	MOV R1 lower 16-bits base(1)
 000001B8	 00000001	MOVT R1 higher 16-bits var(1)
 000001BC	     2201	MOVS R2 #1
 000001BE	 20900009	BL Mod(  2) proc(9)
 000001C2	 F11D0008	ADDS R0 SP #8
 000001C6	 11000009	MOV R1 lower 16-bits base(1)
 000001CA	 00000001	MOVT R1 higher 16-bits var(1)
 000001CE	 F45F727A	MOVS R2 #1000
 000001D2	 2090000A	BL Mod(  2) proc(9)
 000001D6	     9801	LDR R0 [ SP + 4 ]
 000001D8	 10400003	BL Mod(  1) proc(4)
 000001DC	 F11D0008	ADDS R0 SP #8
 000001E0	 1100000D	MOV R1 lower 16-bits base(1)
 000001E4	 00000001	MOVT R1 higher 16-bits var(1)
 000001E8	     9A01	LDR R2 [ SP + 4 ]
 000001EA	     2300	MOVS R3 #0
 000001EC	 10B0000A	BL Mod(  1) proc(11)
 000001F0	 F11D0008	ADDS R0 SP #8
 000001F4	 1100000A	MOV R1 lower 16-bits base(1)
 000001F8	 00000001	MOVT R1 higher 16-bits var(1)
 000001FC	 F11D0220	ADDS R2 SP #32
 00000200	 2080000A	BL Mod(  2) proc(8)
 00000204	 F89D0008	LDRB R0 [ SP + 8 ]
 00000208	     2800	CMP R0 #0
 0000020A	 F0408030	BNE #96, goes to  0000026E
 0000020E	 0000000D	MOV R0 lower 16-bits base(0)
 00000212	 00000000	MOVT R0 higher 16-bits base + 0
 00000216	 13000004	MOV R1 lower 16-bits base(3)
 0000021A	 00000005	MOVT R1 higher 16-bits var(5)
 0000021E	 20000004	MOV R2 lower 16-bits base(0)
 00000222	 00000050	MOVT R2 higher 16-bits base + 80
 00000226	     2305	MOVS R3 #5
 00000228	 31D00014	BL Mod(  3) proc(29)
 0000022C	 00000007	MOV R0 lower 16-bits base(0)
 00000230	 00000000	MOVT R0 higher 16-bits base + 0
 00000234	 13000004	MOV R1 lower 16-bits base(3)
 00000238	 00000005	MOVT R1 higher 16-bits var(5)
 0000023C	     9A08	LDR R2 [ SP + 32 ]
 0000023E	     2301	MOVS R3 #1
 00000240	 31E0000C	BL Mod(  3) proc(30)
 00000244	 00000008	MOV R0 lower 16-bits base(0)
 00000248	 00000000	MOVT R0 higher 16-bits base + 0
 0000024C	 13000004	MOV R1 lower 16-bits base(3)
 00000250	 00000005	MOVT R1 higher 16-bits var(5)
 00000254	 31C0000A	BL Mod(  3) proc(28)
 00000258	 F11D0008	ADDS R0 SP #8
 0000025C	 11000008	MOV R1 lower 16-bits base(1)
 00000260	 00000001	MOVT R1 higher 16-bits var(1)
 00000264	 F11D0220	ADDS R2 SP #32
 00000268	 2080000A	BL Mod(  2) proc(8)
 0000026C	     E7CA	B #-108, goes to  00000204
 0000026E	 05000009	MOV R0 lower 16-bits base(5)
 00000272	 0000000D	MOVT R0 higher 16-bits var(13)
 00000276	     6800	LDR R0 [ R0 + 0 ]
 00000278	 10000005	MOV R1 lower 16-bits base(0)
 0000027C	 00000000	MOVT R1 higher 16-bits base + 0
 00000280	     6809	LDR R1 [ R1 + 0 ]
 00000282	 30E0000D	BL Mod(  3) proc(14)
 00000286	 F85DEB04	LDR LR [ SP ] + 4
 0000028A	 F11D0D24	ADDS SP SP #36
 0000028E	     4770	BX LR
 00000290	 F1BD0D20	SUBS SP SP #32
 00000294	     B500	PUSH LR
 00000296	 0000000F	MOV R0 lower 16-bits base(0)
 0000029A	 00000058	MOVT R0 higher 16-bits base + 88
 0000029E	     210F	MOVS R1 #15
 000002A0	 1020000F	BL Mod(  1) proc(2)
 000002A4	     9001	STR R0 [ SP + 4 ]
 000002A6	 F11D0008	ADDS R0 SP #8
 000002AA	 1100000A	MOV R1 lower 16-bits base(1)
 000002AE	 00000001	MOVT R1 higher 16-bits var(1)
 000002B2	     9A01	LDR R2 [ SP + 4 ]
 000002B4	     2300	MOVS R3 #0
 000002B6	 10B0000B	BL Mod(  1) proc(11)
 000002BA	 F11D0008	ADDS R0 SP #8
 000002BE	 1100000A	MOV R1 lower 16-bits base(1)
 000002C2	 00000001	MOVT R1 higher 16-bits var(1)
 000002C6	 F11D0220	ADDS R2 SP #32
 000002CA	 1150000A	BL Mod(  1) proc(21)
 000002CE	 F89D0008	LDRB R0 [ SP + 8 ]
 000002D2	     2800	CMP R0 #0
 000002D4	 F0408030	BNE #96, goes to  00000338
 000002D8	 0000000D	MOV R0 lower 16-bits base(0)
 000002DC	 00000000	MOVT R0 higher 16-bits base + 0
 000002E0	 13000004	MOV R1 lower 16-bits base(3)
 000002E4	 00000005	MOVT R1 higher 16-bits var(5)
 000002E8	 20000004	MOV R2 lower 16-bits base(0)
 000002EC	 00000068	MOVT R2 higher 16-bits base + 104
 000002F0	     2305	MOVS R3 #5
 000002F2	 31D00014	BL Mod(  3) proc(29)
 000002F6	 00000007	MOV R0 lower 16-bits base(0)
 000002FA	 00000000	MOVT R0 higher 16-bits base + 0
 000002FE	 13000004	MOV R1 lower 16-bits base(3)
 00000302	 00000005	MOVT R1 higher 16-bits var(5)
 00000306	     9A08	LDR R2 [ SP + 32 ]
 00000308	     2301	MOVS R3 #1
 0000030A	 31E0000C	BL Mod(  3) proc(30)
 0000030E	 00000008	MOV R0 lower 16-bits base(0)
 00000312	 00000000	MOVT R0 higher 16-bits base + 0
 00000316	 13000004	MOV R1 lower 16-bits base(3)
 0000031A	 00000005	MOVT R1 higher 16-bits var(5)
 0000031E	 31C0000A	BL Mod(  3) proc(28)
 00000322	 F11D0008	ADDS R0 SP #8
 00000326	 11000008	MOV R1 lower 16-bits base(1)
 0000032A	 00000001	MOVT R1 higher 16-bits var(1)
 0000032E	 F11D0220	ADDS R2 SP #32
 00000332	 1150000A	BL Mod(  1) proc(21)
 00000336	     E7CA	B #-108, goes to  000002CE
 00000338	 05000009	MOV R0 lower 16-bits base(5)
 0000033C	 0000000D	MOVT R0 higher 16-bits var(13)
 00000340	     6800	LDR R0 [ R0 + 0 ]
 00000342	 10000005	MOV R1 lower 16-bits base(0)
 00000346	 00000000	MOVT R1 higher 16-bits base + 0
 0000034A	     6809	LDR R1 [ R1 + 0 ]
 0000034C	 30E0000D	BL Mod(  3) proc(14)
 00000350	 F85DEB04	LDR LR [ SP ] + 4
 00000354	 F11D0D20	ADDS SP SP #32
 00000358	     4770	BX LR
 0000035A	 F1BD0D24	SUBS SP SP #36
 0000035E	     B500	PUSH LR
 00000360	 0000000F	MOV R0 lower 16-bits base(0)
 00000364	 00000070	MOVT R0 higher 16-bits base + 112
 00000368	     210F	MOVS R1 #15
 0000036A	 1020000F	BL Mod(  1) proc(2)
 0000036E	     9001	STR R0 [ SP + 4 ]
 00000370	 F11D0008	ADDS R0 SP #8
 00000374	 1100000A	MOV R1 lower 16-bits base(1)
 00000378	 00000001	MOVT R1 higher 16-bits var(1)
 0000037C	     9A01	LDR R2 [ SP + 4 ]
 0000037E	     2300	MOVS R3 #0
 00000380	 10B0000B	BL Mod(  1) proc(11)
 00000384	 F11D0008	ADDS R0 SP #8
 00000388	 1100000A	MOV R1 lower 16-bits base(1)
 0000038C	 00000001	MOVT R1 higher 16-bits var(1)
 00000390	 F11D0220	ADDS R2 SP #32
 00000394	 2080000A	BL Mod(  2) proc(8)
 00000398	 F89D0008	LDRB R0 [ SP + 8 ]
 0000039C	     2800	CMP R0 #0
 0000039E	 F0408030	BNE #96, goes to  00000402
 000003A2	 0000000D	MOV R0 lower 16-bits base(0)
 000003A6	 00000000	MOVT R0 higher 16-bits base + 0
 000003AA	 13000004	MOV R1 lower 16-bits base(3)
 000003AE	 00000005	MOVT R1 higher 16-bits var(5)
 000003B2	 20000004	MOV R2 lower 16-bits base(0)
 000003B6	 00000080	MOVT R2 higher 16-bits base + 128
 000003BA	     2305	MOVS R3 #5
 000003BC	 31D00014	BL Mod(  3) proc(29)
 000003C0	 00000007	MOV R0 lower 16-bits base(0)
 000003C4	 00000000	MOVT R0 higher 16-bits base + 0
 000003C8	 13000004	MOV R1 lower 16-bits base(3)
 000003CC	 00000005	MOVT R1 higher 16-bits var(5)
 000003D0	     9A08	LDR R2 [ SP + 32 ]
 000003D2	     2301	MOVS R3 #1
 000003D4	 31E0000C	BL Mod(  3) proc(30)
 000003D8	 00000008	MOV R0 lower 16-bits base(0)
 000003DC	 00000000	MOVT R0 higher 16-bits base + 0
 000003E0	 13000004	MOV R1 lower 16-bits base(3)
 000003E4	 00000005	MOVT R1 higher 16-bits var(5)
 000003E8	 31C0000A	BL Mod(  3) proc(28)
 000003EC	 F11D0008	ADDS R0 SP #8
 000003F0	 11000008	MOV R1 lower 16-bits base(1)
 000003F4	 00000001	MOVT R1 higher 16-bits var(1)
 000003F8	 F11D0220	ADDS R2 SP #32
 000003FC	 2080000A	BL Mod(  2) proc(8)
 00000400	     E7CA	B #-108, goes to  00000398
 00000402	 05000009	MOV R0 lower 16-bits base(5)
 00000406	 0000000D	MOVT R0 higher 16-bits var(13)
 0000040A	     6800	LDR R0 [ R0 + 0 ]
 0000040C	 10000005	MOV R1 lower 16-bits base(0)
 00000410	 00000000	MOVT R1 higher 16-bits base + 0
 00000414	     6809	LDR R1 [ R1 + 0 ]
 00000416	 30E0000D	BL Mod(  3) proc(14)
 0000041A	 F85DEB04	LDR LR [ SP ] + 4
 0000041E	 F11D0D24	ADDS SP SP #36
 00000422	     4770	BX LR
 00000424	     B500	PUSH LR
 00000426	 0000000D	MOV R0 lower 16-bits base(0)
 0000042A	 00000000	MOVT R0 higher 16-bits base + 0
 0000042E	 13000004	MOV R1 lower 16-bits base(3)
 00000432	 00000005	MOVT R1 higher 16-bits var(5)
 00000436	 31700010	BL Mod(  3) proc(23)
 0000043A	 F85DEB04	LDR LR [ SP ] + 4
 0000043E	     4770	BX LR
