MODULE LongInt;
  IMPORT SYSTEM;

  PROCEDURE lsl(l: LONGINT; s: INTEGER): LONGINT;
    RETURN LSL(l, s)
  END lsl;

  PROCEDURE lsl5(l: LONGINT): LONGINT;
    RETURN LSL(l, 5)
  END lsl5;

  PROCEDURE lsl32(l: LONGINT): LONGINT;
    RETURN LSL(l, 32)
  END lsl32;

  PROCEDURE lsl37(l: LONGINT): LONGINT;
    RETURN LSL(l, 37)
  END lsl37;

  PROCEDURE lsr(l: LONGINT; s: INTEGER): LONGINT;
    RETURN LSR(l, s)
  END lsr;

  PROCEDURE lsr5(l: LONGINT): LONGINT;
    RETURN LSR(l, 5)
  END lsr5;

  PROCEDURE lsr32(l: LONGINT): LONGINT;
    RETURN LSR(l, 32)
  END lsr32;

  PROCEDURE lsr37(l: LONGINT): LONGINT;
    RETURN LSR(l, 37)
  END lsr37;

  PROCEDURE asr(l: LONGINT; s: INTEGER): LONGINT;
    RETURN ASR(l, s)
  END asr;

  PROCEDURE asr5(l: LONGINT): LONGINT;
    RETURN ASR(l, 5)
  END asr5;

  PROCEDURE asr32(l: LONGINT): LONGINT;
    RETURN ASR(l, 32)
  END asr32;

  PROCEDURE asr37(l: LONGINT): LONGINT;
    RETURN ASR(l, 37)
  END asr37;

(*
  PROCEDURE lslm1(l: LONGINT): LONGINT;
    RETURN LSL(l, -1)
  END lslm1;

  PROCEDURE lsrm1(l: LONGINT): LONGINT;
    RETURN LSR(l, -1)
  END lsrm1;

  PROCEDURE asrm1(l: LONGINT): LONGINT;
    RETURN ASR(l, -1)
  END asrm1;

  VAR a, b: LONGINT; c: INTEGER;

  PROCEDURE DivL(VAR D, S: LONGINT);
    VAR clzd, clzs, coef, coef2: INTEGER; neg: BOOLEAN; q, rd: LONGINT;
  BEGIN (* Int64 division *) neg := FALSE;
    IF D < 0 THEN neg := TRUE; D := -D END;
    clzd := CLZ(D); clzs :=  CLZ(S);
    IF (clzd >= 32) & (clzs >= 32) THEN (*both D and S fit in INTEGER, we can use 32bit division*)
      clzd := SYSTEM.VAL(INTEGER, D) DIV SYSTEM.VAL(INTEGER, S); 
      DEC(SYSTEM.VAL(INTEGER, D), clzd*SYSTEM.VAL(INTEGER, S)); S := clzd
    ELSE (*64bit division is required*) coef := clzs - clzd;
      IF coef < 0 THEN S := 0
      ELSE q := 0; rd := S; IF coef > 0 THEN rd := LSL(rd, coef) END;
        WHILE D > S DO
          IF D < rd THEN rd := LSR(rd, 1); q := LSL(q, 1); DEC(coef) END;
          DEC(D, rd); INC(q);
          clzd := CLZ(D); clzs := CLZ(rd); coef2 := clzd - clzs;
          IF coef2 > 0 THEN q := LSL(q, coef2); rd := LSR(rd, coef2); DEC(coef, coef2) END
        END;
        q := LSL(q, coef); D := rd; S := q
      END
    END; IF neg THEN D := -D; S := -S END
  END DivL;

  PROCEDURE mulL(a, b: LONGINT): LONGINT;
    RETURN a * b
  END mulL;

  PROCEDURE mulL32(a: LONGINT): LONGINT;
    RETURN a * 32
  END mulL32;

  PROCEDURE mulL2(a: LONGINT): LONGINT;
    RETURN 2L * a
  END mulL2;

  PROCEDURE adL;
    VAR a, b, c: LONGINT;
  BEGIN b := c - a;
    a := b + c
  END adL;

  PROCEDURE addL(a, b: LONGINT): LONGINT;
    RETURN a + b
  END addL;

BEGIN a := addL(a, b);
  INC(a, b)
*)
END LongInt.

OM4Tool.DecObj LongInt.m4c
decode LongInt.m4c
LongInt B0A8E01A   1   372
imports:
type descriptors

data     0
strings

code
commands:
entries
 0000015E
pointer refs

fixP =        0
fixD =        0
fixT =        0
entry =      350
 00000000	     B407	PUSH R0 R1 R2
 00000002	     B500	PUSH LR
 00000004	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 00000008	     9A03	LDR R2 [SP + 12]
 0000000A	 F1B20420	SUBS R4 R2 #32
 0000000E	 FA10F404	LSLS R4 R0 R4
 00000012	 F1D20320	RSBS R3 R2 #32
 00000016	     4091	LSLS R1 R1 R2
 00000018	 FA30F303	LSRS R3 R0 R3
 0000001C	     4321	ORRS R1 R1 R4
 0000001E	     4090	LSLS R0 R0 R2
 00000020	     4319	ORRS R1 R1 R3
 00000022	 F85DEB04	LDR LR [ SP ] + 4
 00000026	 F11D0D0C	ADDS SP SP #12
 0000002A	     4770	BX LR
 0000002C	     B403	PUSH R0 R1
 0000002E	     B500	PUSH LR
 00000030	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 00000034	     0149	LSLS R1 R1 #5
 00000036	 EA5161D0	ORRS R1 R1 R0 LSR #27
 0000003A	     0140	LSLS R0 R0 #5
 0000003C	 F85DEB04	LDR LR [ SP ] + 4
 00000040	 F11D0D08	ADDS SP SP #8
 00000044	     4770	BX LR
 00000046	     B403	PUSH R0 R1
 00000048	     B500	PUSH LR
 0000004A	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 0000004E	     0001	LSLS R1 R0 #0
 00000050	     2000	MOVS R0 #0
 00000052	 F85DEB04	LDR LR [ SP ] + 4
 00000056	 F11D0D08	ADDS SP SP #8
 0000005A	     4770	BX LR
 0000005C	     B403	PUSH R0 R1
 0000005E	     B500	PUSH LR
 00000060	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 00000064	     0141	LSLS R1 R0 #5
 00000066	     2000	MOVS R0 #0
 00000068	 F85DEB04	LDR LR [ SP ] + 4
 0000006C	 F11D0D08	ADDS SP SP #8
 00000070	     4770	BX LR
 00000072	     B407	PUSH R0 R1 R2
 00000074	     B500	PUSH LR
 00000076	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 0000007A	     9A03	LDR R2 [SP + 12]
 0000007C	 F1D20420	RSBS R4 R2 #32
 00000080	 FA11F404	LSLS R4 R1 R4
 00000084	 F1B20320	SUBS R3 R2 #32
 00000088	     40D0	LSRS R0 R0 R2
 0000008A	 FA31F303	LSRS R3 R1 R3
 0000008E	     4320	ORRS R0 R0 R4
 00000090	     4318	ORRS R0 R0 R3
 00000092	     40D1	LSRS R1 R1 R2
 00000094	 F85DEB04	LDR LR [ SP ] + 4
 00000098	 F11D0D0C	ADDS SP SP #12
 0000009C	     4770	BX LR
 0000009E	     B403	PUSH R0 R1
 000000A0	     B500	PUSH LR
 000000A2	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 000000A6	     0940	LSRS R0 R0 #5
 000000A8	 EA5060C1	ORRS R0 R0 R1 LSL #27
 000000AC	     0949	LSRS R1 R1 #5
 000000AE	 F85DEB04	LDR LR [ SP ] + 4
 000000B2	 F11D0D08	ADDS SP SP #8
 000000B6	     4770	BX LR
 000000B8	     B403	PUSH R0 R1
 000000BA	     B500	PUSH LR
 000000BC	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 000000C0	     4608	MOV R0 R1
 000000C2	     2100	MOVS R1 #0
 000000C4	 F85DEB04	LDR LR [ SP ] + 4
 000000C8	 F11D0D08	ADDS SP SP #8
 000000CC	     4770	BX LR
 000000CE	     B403	PUSH R0 R1
 000000D0	     B500	PUSH LR
 000000D2	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 000000D6	     0948	LSRS R0 R1 #5
 000000D8	     2100	MOVS R1 #0
 000000DA	 F85DEB04	LDR LR [ SP ] + 4
 000000DE	 F11D0D08	ADDS SP SP #8
 000000E2	     4770	BX LR
 000000E4	     B407	PUSH R0 R1 R2
 000000E6	     B500	PUSH LR
 000000E8	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 000000EC	     9A03	LDR R2 [SP + 12]
 000000EE	 F1D20420	RSBS R4 R2 #32
 000000F2	 FA11F404	LSLS R4 R1 R4
 000000F6	 F1B20320	SUBS R3 R2 #32
 000000FA	 FA20F002	LSR R0 R0 R2
 000000FE	     BF58	IT PL
 00000100	 FA41F303	ASRPL R3 R1 R3
 00000104	 EA400004	ORR R0 R0 R4 LSL #0
 00000108	     BF58	IT PL
 0000010A	     4318	ORRPL R0 R0 R3
 0000010C	     4111	ASRS R1 R1 R2
 0000010E	 F85DEB04	LDR LR [ SP ] + 4
 00000112	 F11D0D0C	ADDS SP SP #12
 00000116	     4770	BX LR
 00000118	     B403	PUSH R0 R1
 0000011A	     B500	PUSH LR
 0000011C	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 00000120	     0940	LSRS R0 R0 #5
 00000122	 EA5060C1	ORRS R0 R0 R1 LSL #27
 00000126	     1149	ASRS R1 R1 #5
 00000128	 F85DEB04	LDR LR [ SP ] + 4
 0000012C	 F11D0D08	ADDS SP SP #8
 00000130	     4770	BX LR
 00000132	     B403	PUSH R0 R1
 00000134	     B500	PUSH LR
 00000136	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 0000013A	     4608	MOV R0 R1
 0000013C	     17C9	ASRS R1 R1 #31
 0000013E	 F85DEB04	LDR LR [ SP ] + 4
 00000142	 F11D0D08	ADDS SP SP #8
 00000146	     4770	BX LR
 00000148	     B403	PUSH R0 R1
 0000014A	     B500	PUSH LR
 0000014C	 E9DD0101	LDRD R0 R1 [ SP+ 4 ]
 00000150	     1148	ASRS R0 R1 #5
 00000152	     17C9	ASRS R1 R1 #31
 00000154	 F85DEB04	LDR LR [ SP ] + 4
 00000158	 F11D0D08	ADDS SP SP #8
 0000015C	     4770	BX LR
 0000015E	     B500	PUSH LR
 00000160	 F85DEB04	LDR LR [ SP ] + 4
 00000164	     4770	BX LR
